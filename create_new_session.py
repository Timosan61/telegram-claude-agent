#!/usr/bin/env python3
"""
üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π Telegram —Å–µ—Å—Å–∏–∏

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞,
–∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
"""
import asyncio
import os
import sys
from datetime import datetime
import sqlite3
from dotenv import load_dotenv

load_dotenv()

try:
    from telethon import TelegramClient
    from telethon.sessions import SQLiteSession
except ImportError:
    print("‚ùå –û–®–ò–ë–ö–ê: telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install telethon cryptg python-dotenv")
    sys.exit(1)

async def create_fresh_session():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —á–∏—Å—Ç–æ–π —Å–µ—Å—Å–∏–∏"""
    print("üîÑ –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ô TELEGRAM –°–ï–°–°–ò–ò")
    print("=" * 45)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    api_id = os.getenv("TELEGRAM_API_ID")
    api_hash = os.getenv("TELEGRAM_API_HASH")
    phone = os.getenv("TELEGRAM_PHONE")
    
    if not all([api_id, api_hash, phone]):
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env")
        return False
    
    api_id = int(api_id)
    print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
    print(f"   üîë API ID: {api_id}")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Å–µ—Å—Å–∏–∏
    session_file = "telegram_agent.session"
    if os.path.exists(session_file):
        backup_name = f"{session_file}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        os.rename(session_file, backup_name)
        print(f"üìÅ –°—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫: {backup_name}")
    
    # –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    print("\nüîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
    
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        conn = sqlite3.connect(backup_name)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        cursor.execute("SELECT * FROM sessions")
        session_data = cursor.fetchall()
        
        if session_data:
            print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏")
            dc_id, server_address, port, auth_key, takeout_id = session_data[0]
            print(f"   DC ID: {dc_id}")
            print(f"   –°–µ—Ä–≤–µ—Ä: {server_address}:{port}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            client = TelegramClient("telegram_agent", api_id, api_hash)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await client.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if await client.is_user_authorized():
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
                me = await client.get_me()
                print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} {me.last_name or ''}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ª–æ–≥–∏
                print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏–∞–ª–æ–≥–∞–º...")
                dialogs_count = 0
                target_found = False
                
                async for dialog in client.iter_dialogs(limit=10):
                    dialogs_count += 1
                    
                    if 'eslitotoeto' in dialog.name.lower():
                        target_found = True
                        print(f"üéØ –¶–ï–õ–ï–í–û–ô –ö–ê–ù–ê–õ –ù–ê–ô–î–ï–ù: {dialog.name}")
                
                print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: {dialogs_count}")
                print(f"üéØ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {'‚úÖ –ù–∞–π–¥–µ–Ω' if target_found else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
                
                await client.disconnect()
                conn.close()
                
                return True
            else:
                print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                await client.disconnect()
                conn.close()
                return False
                
        else:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏")
            conn.close()
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        return False

async def main():
    success = await create_fresh_session()
    
    print("\n" + "=" * 45)
    if success:
        print("‚úÖ –°–ï–°–°–ò–Ø –£–°–ü–ï–®–ù–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê")
        print("üîß Backend –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram –∞–≥–µ–Ω—Ç")
        print("üéØ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç: python test_after_reauth.py")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API: curl <backend_url>/health")
    else:
        print("‚ùå –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–ò –ù–ï –£–î–ê–õ–û–°–¨")
        print("üí° –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–µ: python reauth_telegram.py")
        print("   2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: python test_after_reauth.py")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()