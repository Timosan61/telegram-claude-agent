#!/usr/bin/env python3
"""
üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è DigitalOcean App Platform
"""
import os
import json
import requests
from dotenv import load_dotenv

load_dotenv()

class DOAppEnvironmentUpdater:
    def __init__(self):
        self.token = os.getenv('DIGITALOCEAN_TOKEN')
        if not self.token:
            print("‚ùå DIGITALOCEAN_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            exit(1)
        
        self.headers = {
            'Authorization': f'Bearer {self.token}',
            'Content-Type': 'application/json'
        }
        
        self.app_id = "090c79a2-012d-41fa-a89f-fca3017701e2"  # ID –≤–∞—à–µ–≥–æ answerbot
        print(f"üéØ –¶–µ–ª–µ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {self.app_id}")
    
    def get_app_spec(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            response = requests.get(
                f'https://api.digitalocean.com/v2/apps/{self.app_id}',
                headers=self.headers
            )
            response.raise_for_status()
            return response.json()['app']
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            return None
    
    def update_environment_variables(self, session_string):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
            app = self.get_app_spec()
            if not app:
                return False
            
            spec = app['spec'].copy()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if 'envs' not in spec:
                spec['envs'] = []
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TELEGRAM_SESSION_STRING
            session_var = {
                "key": "TELEGRAM_SESSION_STRING",
                "value": session_string,
                "scope": "RUN_AND_BUILD_TIME"
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            existing_var_index = None
            for i, env_var in enumerate(spec['envs']):
                if env_var['key'] == 'TELEGRAM_SESSION_STRING':
                    existing_var_index = i
                    break
            
            if existing_var_index is not None:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                spec['envs'][existing_var_index] = session_var
                print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_SESSION_STRING –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                spec['envs'].append(session_var)
                print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_SESSION_STRING –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            
            # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Telegram API –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            telegram_vars = [
                {
                    "key": "TELEGRAM_API_ID",
                    "value": os.getenv("TELEGRAM_API_ID", "21220429"),
                    "scope": "RUN_AND_BUILD_TIME"
                },
                {
                    "key": "TELEGRAM_API_HASH", 
                    "value": os.getenv("TELEGRAM_API_HASH", "2f4d35cf3aa6bfcfae8f655547084a44"),
                    "scope": "RUN_AND_BUILD_TIME"
                },
                {
                    "key": "TELEGRAM_PHONE",
                    "value": os.getenv("TELEGRAM_PHONE", "+79885517453"),
                    "scope": "RUN_AND_BUILD_TIME"
                }
            ]
            
            for telegram_var in telegram_vars:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
                existing = False
                for env_var in spec['envs']:
                    if env_var['key'] == telegram_var['key']:
                        existing = True
                        break
                
                if not existing:
                    spec['envs'].append(telegram_var)
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {telegram_var['key']}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            update_payload = {"spec": spec}
            
            response = requests.put(
                f'https://api.digitalocean.com/v2/apps/{self.app_id}',
                headers=self.headers,
                json=update_payload
            )
            response.raise_for_status()
            
            print("üöÄ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            print("‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π...")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
            return False
    
    def check_deployment_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è"""
        try:
            app = self.get_app_spec()
            if not app:
                return
            
            deployment = app.get('active_deployment', {})
            phase = deployment.get('phase', 'Unknown')
            
            print(f"üìä –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è: {phase}")
            
            if phase == 'ACTIVE':
                print("‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                live_url = app.get('live_url', '')
                if live_url:
                    print(f"üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ: {live_url}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
                    try:
                        health_response = requests.get(f"{live_url}/health", timeout=10)
                        if health_response.status_code == 200:
                            health_data = health_response.json()
                            telegram_connected = health_data.get('telegram_connected', False)
                            if telegram_connected:
                                print("üéâ TELEGRAM AGENT –ê–í–¢–û–†–ò–ó–û–í–ê–ù –£–°–ü–ï–®–ù–û!")
                            else:
                                print("‚ö†Ô∏è Telegram Agent –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏")
                    except:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å health endpoint")
            
            elif phase in ['BUILDING', 'DEPLOYING']:
                print("‚è≥ –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            elif phase == 'ERROR':
                print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ Dashboard")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

def main():
    print("üîß –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø APP PLATFORM")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è
    session_file = "telegram_session_for_app_platform.json"
    
    if os.path.exists(session_file):
        print(f"üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
        try:
            with open(session_file, 'r', encoding='utf-8') as f:
                session_data = json.load(f)
            
            session_string = session_data.get('session_string')
            if not session_string:
                print("‚ùå session_string –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ")
                return
            
            print(f"‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {session_string[:20]}...")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {e}")
            return
    else:
        print(f"‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {session_file}")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python create_session_for_app_platform.py")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ updater –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    updater = DOAppEnvironmentUpdater()
    
    print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    success = updater.update_environment_variables(session_string)
    
    if success:
        print("\n‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã)...")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        import time
        for i in range(6):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º 6 —Ä–∞–∑ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30 —Å–µ–∫—É–Ω–¥
            time.sleep(30)
            print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ #{i+1}/6...")
            updater.check_deployment_status()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –¥–µ–ø–ª–æ–π
            app = updater.get_app_spec()
            if app and app.get('active_deployment', {}).get('phase') == 'ACTIVE':
                break
        
        print("\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
        print("=" * 30)
        updater.check_deployment_status()
        
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()