#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –≥—Ä—É–ø–ø–∞—Ö
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
"""
import asyncio
import os
import sys
from datetime import datetime
from dotenv import load_dotenv

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
load_dotenv()

from telethon import TelegramClient, events
from telethon.tl.types import PeerChannel, PeerChat, PeerUser

class SimpleTelegramTester:
    def __init__(self):
        self.api_id = int(os.getenv("TELEGRAM_API_ID"))
        self.api_hash = os.getenv("TELEGRAM_API_HASH")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
        self.client = TelegramClient("telegram_agent", self.api_id, self.api_hash)
        self.message_count = 0
        self.test_duration = 20  # —Å–µ–∫—É–Ω–¥
        
    async def test_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Telegram –∞–≥–µ–Ω—Ç–∞")
        print("=" * 50)
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π
            await self.client.start()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ
            me = await self.client.get_me()
            print(f"üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} ({me.username or '–±–µ–∑ username'})")
            print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {me.phone}")
            print()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ (—á–∞—Ç–æ–≤)
            print("üìã –í–∞—à–∏ —á–∞—Ç—ã:")
            async for dialog in self.client.iter_dialogs(limit=10):
                chat_type = ""
                if dialog.is_channel:
                    chat_type = "üì∫ –ö–∞–Ω–∞–ª"
                elif dialog.is_group:
                    chat_type = "üë• –ì—Ä—É–ø–ø–∞" 
                else:
                    chat_type = "üë§ –õ–∏—á–Ω—ã–π"
                print(f"  {chat_type}: {dialog.name} (ID: {dialog.id})")
            print()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            @self.client.on(events.NewMessage())
            async def handler(event):
                await self.handle_message(event)
            
            print(f"üîç –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ {self.test_duration} —Å–µ–∫—É–Ω–¥...")
            print("üí° –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ –ª—é–±–æ–º —á–∞—Ç–µ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∞–∫—Ü–∏—é")
            print("=" * 50)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            await asyncio.sleep(self.test_duration)
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:")
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.message_count}")
            if self.message_count == 0:
                print("   ‚ö†Ô∏è  –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            else:
                print("   ‚úÖ –ê–≥–µ–Ω—Ç –≤–∏–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
        finally:
            await self.client.disconnect()
            
        return True
    
    async def handle_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            self.message_count += 1
            message = event.message
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —á–∞—Ç–∞
            chat_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if isinstance(message.peer_id, PeerChannel):
                chat_info = f"üì∫ –ö–∞–Ω–∞–ª ID: {message.peer_id.channel_id}"
            elif isinstance(message.peer_id, PeerChat):
                chat_info = f"üë• –ì—Ä—É–ø–ø–∞ ID: {message.peer_id.chat_id}"
            elif isinstance(message.peer_id, PeerUser):
                chat_info = f"üë§ –õ–∏—á–Ω—ã–π ID: {message.peer_id.user_id}"
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
            try:
                chat_entity = await self.client.get_entity(message.peer_id)
                if hasattr(chat_entity, 'title'):
                    chat_name = chat_entity.title
                elif hasattr(chat_entity, 'username'):
                    chat_name = f"@{chat_entity.username}"
                elif hasattr(chat_entity, 'first_name'):
                    chat_name = chat_entity.first_name
                else:
                    chat_name = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            except:
                chat_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –ö—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text_preview = "–ü—É—Å—Ç–æ–µ"
            if message.text:
                text_preview = message.text[:50] + "..." if len(message.text) > 50 else message.text
            
            # –í—Ä–µ–º—è
            now = datetime.now().strftime("%H:%M:%S")
            
            print(f"üì® [{now}] #{self.message_count}")
            print(f"   {chat_info}")
            print(f"   üìõ {chat_name}")
            print(f"   üí¨ {text_preview}")
            print()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SimpleTelegramTester()
    success = await tester.test_connection()
    
    if success:
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")