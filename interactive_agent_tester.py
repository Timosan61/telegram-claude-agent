#!/usr/bin/env python3
"""
üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è Telegram –∞–≥–µ–Ω—Ç–∞ —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º —Ä–µ–∂–∏–º–æ–º

–ü–æ–∑–≤–æ–ª—è–µ—Ç:
- –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –≤ –∞–≥–µ–Ω—Ç–µ
- –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
- –í–∏–¥–µ—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
- –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–µ–∞–∫—Ü–∏—é –∞–≥–µ–Ω—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""
import asyncio
import os
import sys
from datetime import datetime
from dotenv import load_dotenv

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
load_dotenv()

from telethon import TelegramClient, events
from telethon.tl.types import Message

class InteractiveAgentTester:
    def __init__(self):
        self.api_id = int(os.getenv("TELEGRAM_API_ID"))
        self.api_hash = os.getenv("TELEGRAM_API_HASH")
        self.phone = os.getenv("TELEGRAM_PHONE")
        
        self.client = TelegramClient("telegram_agent", self.api_id, self.api_hash)
        self.debug_mode = True
        self.test_keywords = ["–∏–∏", "–±–æ—Ç", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–ø–æ–º–æ—â—å"]
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.total_messages = 0
        self.matching_messages = 0
        self.responses_sent = 0
        
    async def start_interactive_testing(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä Telegram –∞–≥–µ–Ω—Ç–∞")
        print("=" * 60)
        
        await self.client.start(phone=self.phone)
        me = await self.client.get_me()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –æ—Ç–ª–∞–¥–∫–æ–π
        self.client.add_event_handler(self.debug_message_handler, events.NewMessage())
        
        print(f"üîß –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: {'‚úÖ –í–ö–õ–Æ–ß–ï–ù' if self.debug_mode else '‚ùå –í–´–ö–õ–Æ–ß–ï–ù'}")
        print(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(self.test_keywords)}")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
        self.show_commands()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        await self.run_interactive_mode()
    
    def show_commands(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
        print("üéÆ –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:")
        print("‚îÄ" * 30)
        print("help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
        print("status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("debug    - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º")
        print("test     - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        print("monitor  - –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
        print("channel  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É @eslitotoeto")
        print("keywords - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
        print("quit     - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        print("‚îÄ" * 30)
        print()
    
    async def run_interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        print("üí° –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏:")
        
        while True:
            try:
                command = input("üéÆ > ").strip().lower()
                
                if command == "help":
                    self.show_commands()
                    
                elif command == "status":
                    await self.show_status()
                    
                elif command == "debug":
                    self.debug_mode = not self.debug_mode
                    print(f"üîß –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: {'‚úÖ –í–ö–õ–Æ–ß–ï–ù' if self.debug_mode else '‚ùå –í–´–ö–õ–Æ–ß–ï–ù'}")
                    
                elif command == "test":
                    await self.send_test_message()
                    
                elif command == "monitor":
                    await self.start_monitoring()
                    
                elif command == "channel":
                    await self.check_channel_access()
                    
                elif command == "keywords":
                    await self.change_keywords()
                    
                elif command in ["quit", "exit", "q"]:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                    
                else:
                    print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{command}'. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
                    
            except KeyboardInterrupt:
                print("\\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        
        await self.client.disconnect()
    
    async def debug_message_handler(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (–∏–º–∏—Ç–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞)"""
        if not self.debug_mode:
            return
            
        try:
            message: Message = event.message
            self.total_messages += 1
            
            now = datetime.now().strftime("%H:%M:%S")
            print(f"\\nüîç DEBUG [{now}] - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è #{self.total_messages}")
            print("‚îÄ" * 50)
            
            # –®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —á–∞—Ç–∞
            chat_info = await self.get_chat_info(message.peer_id)
            print(f"1Ô∏è‚É£ –ß–∞—Ç: {chat_info['type']} '{chat_info['title']}' (ID: {chat_info['id']})")
            
            # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            if message.text:
                text_preview = message.text[:80] + "..." if len(message.text) > 80 else message.text
                print(f"2Ô∏è‚É£ –¢–µ–∫—Å—Ç: {text_preview}")
            else:
                print(f"2Ô∏è‚É£ –¢–µ–∫—Å—Ç: [–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –º–µ–¥–∏–∞]")
                print("‚ùå –§–ò–õ–¨–¢–†: –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                return
            
            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π (–∏–º–∏—Ç–∞—Ü–∏—è)
            is_monitored_chat = self.is_chat_monitored(chat_info)
            print(f"3Ô∏è‚É£ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–∞: {'‚úÖ –î–ê' if is_monitored_chat else '‚ùå –ù–ï–¢'}")
            
            if not is_monitored_chat:
                print("‚ùå –§–ò–õ–¨–¢–†: –ß–∞—Ç –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                return
            
            # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            found_keywords = self.find_keywords(message.text)
            print(f"4Ô∏è‚É£ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(found_keywords) if found_keywords else '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}")
            
            if not found_keywords:
                print("‚ùå –§–ò–õ–¨–¢–†: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                return
            
            # –®–∞–≥ 5: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º!
            self.matching_messages += 1
            print("‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º!")
            
            # –®–∞–≥ 6: –ò–º–∏—Ç–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
            print("5Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Claude AI...")
            test_response = f"–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—à–µ–ª –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(found_keywords)}"
            print(f"6Ô∏è‚É£ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {test_response}")
            
            # –®–∞–≥ 7: –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)
            print("7Ô∏è‚É£ [–¢–ï–°–¢] –û—Ç–≤–µ—Ç –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")
            self.responses_sent += 1
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.matching_messages}/{self.total_messages} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
            print("‚îÄ" * 50)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–ª–∞–¥—á–∏–∫–µ: {e}")
            import traceback
            traceback.print_exc()
    
    async def get_chat_info(self, peer_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ"""
        try:
            entity = await self.client.get_entity(peer_id)
            
            if hasattr(entity, 'title'):
                return {
                    'type': 'üì∫ –ö–∞–Ω–∞–ª' if hasattr(entity, 'broadcast') else 'üë• –ì—Ä—É–ø–ø–∞',
                    'title': entity.title,
                    'id': entity.id,
                    'username': getattr(entity, 'username', None)
                }
            elif hasattr(entity, 'first_name'):
                return {
                    'type': 'üë§ –õ–∏—á–Ω—ã–π —á–∞—Ç',
                    'title': entity.first_name,
                    'id': entity.id,
                    'username': getattr(entity, 'username', None)
                }
        except:
            pass
        
        return {
            'type': '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            'title': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            'id': str(peer_id),
            'username': None
        }
    
    def is_chat_monitored(self, chat_info):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —á–∞—Ç (–∏–º–∏—Ç–∞—Ü–∏—è –∫–∞–º–ø–∞–Ω–∏–∏)"""
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –∫–∞–Ω–∞–ª–∞ eslitotoeto
        monitored_chats = ["@eslitotoeto", "1676879122"]
        
        return (
            str(chat_info['id']) in monitored_chats or
            (chat_info['username'] and f"@{chat_info['username']}" in monitored_chats) or
            "eslitotoeto" in chat_info['title'].lower()
        )
    
    def find_keywords(self, text):
        """–ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ"""
        if not text:
            return []
        
        text_lower = text.lower()
        return [kw for kw in self.test_keywords if kw.lower() in text_lower]
    
    async def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("‚îÄ" * 30)
        print(f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.total_messages}")
        print(f"üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {self.matching_messages}")
        print(f"ü§ñ –û—Ç–≤–µ—Ç–æ–≤: {self.responses_sent}")
        if self.total_messages > 0:
            success_rate = (self.matching_messages / self.total_messages) * 100
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {success_rate:.1f}%")
        print(f"üîß –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: {'‚úÖ –í–ö–õ–Æ–ß–ï–ù' if self.debug_mode else '‚ùå –í–´–ö–õ–Æ–ß–ï–ù'}")
        print(f"üéØ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(self.test_keywords)}")
        print()
    
    async def send_test_message(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
        try:
            print("üìù –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ @eslitotoeto...")
            
            channel = await self.client.get_entity("@eslitotoeto")
            test_message = f"üß™ –¢–µ—Å—Ç: –∏–∏ –±–æ—Ç - {datetime.now().strftime('%H:%M:%S')}"
            
            await self.client.send_message(channel, test_message)
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {test_message}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def start_monitoring(self):
        """–ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("üîç –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        print("üí° –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ Telegram —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Ç–ª–∞–¥–∫—É")
        print("‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é")
        print()
        
        try:
            await self.client.run_until_disconnected()
        except KeyboardInterrupt:
            print("\\n‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print()
    
    async def check_channel_access(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É @eslitotoeto"""
        try:
            print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É @eslitotoeto...")
            
            channel = await self.client.get_entity("@eslitotoeto")
            print(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {channel.title}")
            print(f"   ID: {channel.id}")
            print(f"   –¢–∏–ø: {type(channel).__name__}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            print(f"\\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è:")
            messages = await self.client.get_messages(channel, limit=3)
            
            for i, msg in enumerate(messages, 1):
                text = msg.text[:50] + "..." if msg.text and len(msg.text) > 50 else msg.text or "[–ú–µ–¥–∏–∞]"
                print(f"   {i}. [{msg.id}] {text}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if msg.text:
                    keywords = self.find_keywords(msg.text)
                    if keywords:
                        print(f"      üî• –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {e}")
        
        print()
    
    async def change_keywords(self):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"""
        print(f"–¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(self.test_keywords)}")
        new_keywords = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ").strip()
        
        if new_keywords:
            self.test_keywords = [kw.strip() for kw in new_keywords.split(",") if kw.strip()]
            print(f"‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(self.test_keywords)}")
        else:
            print("‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω—ã")
        print()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = InteractiveAgentTester()
    await tester.start_interactive_testing()

if __name__ == "__main__":
    print("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä Telegram –∞–≥–µ–Ω—Ç–∞")
    print("–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ª–∞–¥–∏—Ç—å —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–∞")
    print()
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()