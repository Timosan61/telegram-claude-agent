#!/usr/bin/env python3
"""
üîë –î–æ–±–∞–≤–ª–µ–Ω–∏–µ OpenAI API –∫–ª—é—á–∞ –≤ DigitalOcean App Platform
"""
import os
import requests
from dotenv import load_dotenv

load_dotenv()

class DOOpenAIUpdater:
    def __init__(self):
        self.token = os.getenv('DIGITALOCEAN_TOKEN')
        if not self.token:
            print("‚ùå DIGITALOCEAN_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            exit(1)
        
        self.headers = {
            'Authorization': f'Bearer {self.token}',
            'Content-Type': 'application/json'
        }
        
        self.app_id = "090c79a2-012d-41fa-a89f-fca3017701e2"  # ID –≤–∞—à–µ–≥–æ answerbot
        self.openai_key = os.getenv('OPENAI_API_KEY')
        
        if not self.openai_key:
            print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            exit(1)
        
        print(f"üéØ –¶–µ–ª–µ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {self.app_id}")
        print(f"üîë OpenAI –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {self.openai_key[:20]}...")
    
    def get_app_spec(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            response = requests.get(
                f'https://api.digitalocean.com/v2/apps/{self.app_id}',
                headers=self.headers
            )
            response.raise_for_status()
            return response.json()['app']
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            return None
    
    def add_openai_key(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ OpenAI –∫–ª—é—á–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
            app = self.get_app_spec()
            if not app:
                return False
            
            spec = app['spec'].copy()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if 'envs' not in spec:
                spec['envs'] = []
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ OpenAI –∫–ª—é—á–∞
            openai_var = {
                "key": "OPENAI_API_KEY",
                "value": self.openai_key,
                "scope": "RUN_AND_BUILD_TIME"
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            existing_var_index = None
            for i, env_var in enumerate(spec['envs']):
                if env_var['key'] == 'OPENAI_API_KEY':
                    existing_var_index = i
                    break
            
            if existing_var_index is not None:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                spec['envs'][existing_var_index] = openai_var
                print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è OPENAI_API_KEY –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                spec['envs'].append(openai_var)
                print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è OPENAI_API_KEY –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            update_payload = {"spec": spec}
            
            response = requests.put(
                f'https://api.digitalocean.com/v2/apps/{self.app_id}',
                headers=self.headers,
                json=update_payload
            )
            response.raise_for_status()
            
            print("üöÄ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            print("‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π...")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è OpenAI –∫–ª—é—á–∞: {e}")
            return False
    
    def check_deployment_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è"""
        try:
            app = self.get_app_spec()
            if not app:
                return
            
            deployment = app.get('active_deployment', {})
            phase = deployment.get('phase', 'Unknown')
            
            print(f"üìä –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è: {phase}")
            
            if phase == 'ACTIVE':
                print("‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                live_url = app.get('live_url', '')
                if live_url:
                    print(f"üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ: {live_url}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º environment endpoint
                    try:
                        import time
                        time.sleep(5)  # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        env_response = requests.get(f"{live_url}/environment/check", timeout=10)
                        if env_response.status_code == 200:
                            env_data = env_response.json()
                            openai_available = env_data.get('ai_providers', {}).get('openai', False)
                            if openai_available:
                                print("üéâ OPENAI API –ö–õ–Æ–ß –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –£–°–ü–ï–®–ù–û!")
                            else:
                                print("‚ö†Ô∏è OpenAI –∫–ª—é—á –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏")
                    except:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å environment endpoint")
            
            elif phase in ['BUILDING', 'DEPLOYING']:
                print("‚è≥ –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            elif phase == 'ERROR':
                print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ Dashboard")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

def main():
    print("üîë –î–û–ë–ê–í–õ–ï–ù–ò–ï OPENAI API –ö–õ–Æ–ß–ê –í APP PLATFORM")
    print("=" * 60)
    
    updater = DOOpenAIUpdater()
    
    print("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ OpenAI –∫–ª—é—á–∞...")
    success = updater.add_openai_key()
    
    if success:
        print("\n‚úÖ OpenAI –∫–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã)...")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        import time
        for i in range(4):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º 4 —Ä–∞–∑–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30 —Å–µ–∫—É–Ω–¥
            time.sleep(30)
            print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ #{i+1}/4...")
            updater.check_deployment_status()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –¥–µ–ø–ª–æ–π
            app = updater.get_app_spec()
            if app and app.get('active_deployment', {}).get('phase') == 'ACTIVE':
                break
        
        print("\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
        print("=" * 30)
        updater.check_deployment_status()
        
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è OpenAI –∫–ª—é—á–∞")

if __name__ == "__main__":
    main()