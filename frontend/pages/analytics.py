import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import time
import json

from frontend.components.api_client import api_client


def show_analytics_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–∞—Ç–æ–≤"""
    st.header("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —á–∞—Ç–æ–≤")
    st.markdown("–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ Telegram-—á–∞—Ç–∞—Ö")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    analytics_status = api_client.make_request("/health")
    
    if not analytics_status:
        st.error("‚ùå –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    telegram_status = analytics_status.get("telegram_status", {}) if analytics_status else {}
    if not telegram_status.get("connected", False):
        st.warning("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram")
        if st.button("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"):
            with st.spinner("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram..."):
                st.info("üí° Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                st.info("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
        return
    
    # –¢–∞–±—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    tab1, tab2, tab3 = st.tabs(["üîç –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üìã –ò—Å—Ç–æ—Ä–∏—è"])
    
    with tab1:
        show_new_analysis_form()
    
    with tab2:
        show_analysis_results()
    
    with tab3:
        show_analysis_history()


def show_new_analysis_form():
    """–§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    st.subheader("üîç –ü—Ä—è–º–æ–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞")
    st.markdown("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞. –ö–∞–º–ø–∞–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.")
    
    # –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å –ø—Ä—è–º—ã–º –≤–≤–æ–¥–æ–º –∫–∞–Ω–∞–ª–∞
    with st.form("direct_channel_analysis_form"):
        st.write("**–í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**")
        
        # –ü—Ä—è–º–æ–π –≤–≤–æ–¥ –∫–∞–Ω–∞–ª–∞
        col1, col2 = st.columns([2, 1])
        with col1:
            channel_name = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:",
                placeholder="@channel_name –∏–ª–∏ channel_id",
                help="–í–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞, ID –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ username –±–µ–∑ @"
            )
        
        with col2:
            if st.form_submit_button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª"):
                if channel_name.strip():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
                    with st.spinner("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª..."):
                        channel_info = api_client.get_channel_info(channel_name.strip())
                        
                        if channel_info and channel_info.get("accessible"):
                            st.success("‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
                            info = channel_info.get("info", {})
                            st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {info.get('title', 'N/A')}")
                            if info.get('participant_count'):
                                st.write(f"**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {info['participant_count']}")
                            st.session_state.verified_channel = channel_name.strip()
                            st.session_state.channel_info = channel_info
                        else:
                            error_msg = channel_info.get("error", "–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω") if channel_info else "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"
                            st.error(f"‚ùå {error_msg}")
                            if "verified_channel" in st.session_state:
                                del st.session_state.verified_channel
                else:
                    st.error("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ
        if hasattr(st.session_state, 'verified_channel') and st.session_state.verified_channel == channel_name:
            channel_info = st.session_state.get('channel_info', {}).get('info', {})
            
            st.write("---")
            st.success(f"‚úÖ –ö–∞–Ω–∞–ª –ø—Ä–æ–≤–µ—Ä–µ–Ω: **{channel_info.get('title', channel_name)}**")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            col1, col2, col3 = st.columns(3)
            with col1:
                st.write(f"**ID:** `{channel_info.get('id', 'N/A')}`")
            with col2:
                st.write(f"**–¢–∏–ø:** {channel_info.get('type', 'N/A')}")
            with col3:
                if channel_info.get('participant_count'):
                    st.write(f"**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {channel_info['participant_count']}")
        
        st.write("---")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
        st.write("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥
            use_date_filter = st.checkbox("–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏", value=False)
            
            if use_date_filter:
                start_date = st.date_input(
                    "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:",
                    value=datetime.now().date() - timedelta(days=30),
                    help="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—è —Å —ç—Ç–æ–π –¥–∞—Ç—ã"
                )
                
                end_date = st.date_input(
                    "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
                    value=datetime.now().date(),
                    help="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ —ç—Ç–æ–π –¥–∞—Ç—ã"
                )
            else:
                start_date = None
                end_date = None
            
            # –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
            limit_messages = st.number_input(
                "–ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π:",
                min_value=100,
                max_value=10000,
                value=1000,
                step=100,
                help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            )
        
        with col2:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            include_media = st.checkbox(
                "–í–∫–ª—é—á–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã",
                value=False,
                help="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏"
            )
            
            include_replies = st.checkbox(
                "–í–∫–ª—é—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã",
                value=True,
                help="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è-–æ—Ç–≤–µ—Ç—ã"
            )
            
            analyze_participants = st.checkbox(
                "–ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                value=True,
                help="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"
            )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        st.write("**–§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):**")
        keywords_text = st.text_area(
            "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:",
            height=80,
            help="–ü–æ –æ–¥–Ω–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –Ω–∞ —Å—Ç—Ä–æ–∫—É. –ë—É–¥–µ—Ç –ø–æ–¥—Å—á–∏—Ç–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞.",
            placeholder="–Ω–æ–≤–æ—Å—Ç—å\\n–∞–Ω–æ–Ω—Å\\n–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
        )
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        submit_button = st.form_submit_button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary")
        
        if submit_button:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–Ω–∞–ª —É–∫–∞–∑–∞–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω
            if not channel_name.strip():
                st.error("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞")
                return
            
            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª
            if not (hasattr(st.session_state, 'verified_channel') and 
                    st.session_state.verified_channel == channel_name.strip()):
                st.warning("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª –∫–Ω–æ–ø–∫–æ–π 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª'")
                # –ù–æ –ø–æ–∑–≤–æ–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∞–ª–∏–∑
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞
            keywords_filter = [kw.strip() for kw in keywords_text.split('\\n') if kw.strip()] if keywords_text else None
            
            analysis_request = {
                "channel_name": channel_name.strip(),
                "limit_messages": int(limit_messages),
                "start_date": start_date.isoformat() if start_date else None,
                "end_date": end_date.isoformat() if end_date else None,
                "include_media": include_media,
                "include_replies": include_replies,
                "keywords_filter": keywords_filter
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Analytics Service –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–∞
            with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ Analytics Service..."):
                health_response = api_client.make_request("/analytics/health")
                
                if not health_response:
                    st.error("‚ùå Analytics Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    st.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
                    return
                
                status = health_response.get("status", "Unknown")
                
                if "‚ùå" in status:
                    st.error(f"‚ùå Analytics Service: {health_response.get('message', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}")
                    
                    # –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    with st.expander("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Analytics Service"):
                        st.json(health_response)
                        
                        credentials = health_response.get("credentials_check", {})
                        missing_creds = [k for k, v in credentials.items() if not v]
                        
                        if missing_creds:
                            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_creds).upper()}")
                            st.code("""
# –î–æ–±–∞–≤—å—Ç–µ –≤ DigitalOcean App Platform:
TELEGRAM_API_ID=your_api_id       # –ß–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12345678)
TELEGRAM_API_HASH=your_api_hash   # –°—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1a2b3c4d...)  
TELEGRAM_PHONE=your_phone         # –° + (–Ω–∞–ø—Ä–∏–º–µ—Ä: +1234567890)
                            """)
                        
                        if "error_details" in health_response:
                            st.text("–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞:")
                            st.code(health_response["error_details"])
                    
                    return
                
                elif "‚ö†Ô∏è" in status:
                    st.warning(f"‚ö†Ô∏è Analytics Service: {health_response.get('message', '–ß–∞—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã')}")
                    if not st.checkbox("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"):
                        return
                else:
                    st.success(f"‚úÖ Analytics Service –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä—è–º–æ–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞
            with st.spinner("–ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞..."):
                response = api_client.start_channel_analysis(analysis_request)
                
                if response:
                    st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω!")
                    st.info(f"üîç **ID –∞–Ω–∞–ª–∏–∑–∞:** `{response['analysis_id']}`")
                    st.info(f"üìä **–ö–∞–Ω–∞–ª:** {response['channel']}")
                    st.info(f"üìù **–°–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:** {response['limit_messages']}")
                    st.info("‚è≥ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞.")
                    st.info("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    st.write("‚Ä¢ Analytics Service –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram")
                    st.write("‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–µ Telegram API credentials")
                    st.write("‚Ä¢ –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π")
                    st.write("‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")


def show_analysis_results():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –∏–∑ analytics API
    analyses_response = api_client.list_analyses()
    analyses = analyses_response.get("analyses", []) if analyses_response else []
    
    if not analyses:
        st.info("üì≠ –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ.")
        return
    
    # –í—ã–±–æ—Ä –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    analysis_options = {}
    for analysis in analyses:
        status_icon = "‚úÖ" if analysis['status'] == 'completed' else "üîÑ" if analysis['status'] == 'in_progress' else "‚ùå"
        display_name = f"{status_icon} {analysis['chat_title']} - {analysis['total_messages']} —Å–æ–æ–±—â–µ–Ω–∏–π"
        analysis_options[display_name] = analysis['analysis_id']
    
    selected_analysis_display = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        options=list(analysis_options.keys())
    )
    
    if not selected_analysis_display:
        return
    
    analysis_id = analysis_options[selected_analysis_display]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞
    status_response = api_client.get_analysis_status(analysis_id)
    
    if status_response:
        if status_response['status'] == 'in_progress':
            st.info("‚è≥ –ê–Ω–∞–ª–∏–∑ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", key=f"refresh_{analysis_id}"):
                st.rerun()
            return
        elif status_response['status'] == 'error':
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {status_response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_response = api_client.get_analysis_results(analysis_id)
    
    if not results_response:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    display_analysis_results(analysis_id, results_response)


def display_analysis_results(analysis_id: str, results: dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    chat_info = results.get("chat_info", {})
    message_stats = results.get("message_stats", {})
    participant_stats = results.get("participant_stats", {})
    time_analysis = results.get("time_analysis", {})
    keyword_analysis = results.get("keyword_analysis", {})
    media_analysis = results.get("media_analysis", {})
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
    st.write("### üí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞", chat_info.get("title", "N/A"))
    with col2:
        st.metric("–¢–∏–ø", chat_info.get("type", "N/A"))
    with col3:
        if chat_info.get("participant_count"):
            st.metric("–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", chat_info["participant_count"])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    st.write("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    if message_stats:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ", message_stats.get("total", 0))
        with col2:
            st.metric("–¢–µ–∫—Å—Ç–æ–≤—ã–µ", message_stats.get("text_messages", 0))
        with col3:
            st.metric("–° –º–µ–¥–∏–∞", message_stats.get("media_messages", 0))
        with col4:
            st.metric("–û—Ç–≤–µ—Ç—ã", message_stats.get("reply_messages", 0))
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞", f"{message_stats.get('avg_message_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
        with col2:
            st.metric("–°–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å", message_stats.get("messages_per_day", 0))
        with col3:
            date_range = message_stats.get("date_range", {})
            if date_range.get("days"):
                st.metric("–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞", f"{date_range['days']} –¥–Ω–µ–π")
    
    # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏
    if time_analysis and time_analysis.get("hourly_distribution"):
        st.write("### ‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
        
        # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º
        hourly_data = time_analysis["hourly_distribution"]
        hours = list(range(24))
        counts = [hourly_data.get(hour, 0) for hour in hours]
        
        fig_hourly = px.bar(
            x=hours,
            y=counts,
            title="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º",
            labels={"x": "–ß–∞—Å", "y": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π"}
        )
        fig_hourly.update_layout(showlegend=False)
        st.plotly_chart(fig_hourly, use_container_width=True)
        
        # –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã
        peak_hour = time_analysis.get("peak_hour", {})
        if peak_hour:
            st.info(f"üïê **–ü–∏–∫–æ–≤—ã–π —á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** {peak_hour['hour']}:00 ({peak_hour['count']} —Å–æ–æ–±—â–µ–Ω–∏–π)")
    
    # –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if participant_stats.get("analyzed") and participant_stats.get("top_participants"):
        st.write("### üë• –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", participant_stats.get("total_participants", 0))
        with col2:
            st.metric("–ë–æ—Ç–æ–≤", participant_stats.get("total_bots", 0))
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        top_participants = participant_stats["top_participants"][:10]
        
        participants_data = []
        for participant in top_participants:
            info = participant.get("info", {})
            name = info.get("first_name", "Unknown")
            if info.get("last_name"):
                name += f" {info['last_name']}"
            if info.get("username"):
                name += f" (@{info['username']})"
            
            participants_data.append({
                "–£—á–∞—Å—Ç–Ω–∏–∫": name,
                "–°–æ–æ–±—â–µ–Ω–∏–π": participant["message_count"],
                "–ë–æ—Ç": "ü§ñ" if info.get("is_bot") else "üë§"
            })
        
        if participants_data:
            df_participants = pd.DataFrame(participants_data)
            st.dataframe(df_participants, use_container_width=True)
    
    # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    if keyword_analysis:
        st.write("### üî§ –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –¢–æ–ø —Å–ª–æ–≤–∞
            top_words = keyword_analysis.get("top_words", [])[:15]
            if top_words:
                words_df = pd.DataFrame(top_words, columns=["–°–ª–æ–≤–æ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
                
                fig_words = px.bar(
                    words_df.head(10),
                    x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                    y="–°–ª–æ–≤–æ",
                    orientation="h",
                    title="–¢–æ–ø-10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ª–æ–≤"
                )
                fig_words.update_layout(yaxis={'categoryorder':'total ascending'})
                st.plotly_chart(fig_words, use_container_width=True)
        
        with col2:
            # –•–µ—à—Ç–µ–≥–∏ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            hashtags = keyword_analysis.get("hashtags", {})
            mentions = keyword_analysis.get("mentions", {})
            
            st.metric("–í—Å–µ–≥–æ —Å–ª–æ–≤", keyword_analysis.get("total_words", 0))
            st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤", keyword_analysis.get("unique_words", 0))
            
            if hashtags.get("total", 0) > 0:
                st.metric("–•–µ—à—Ç–µ–≥–æ–≤", f"{hashtags['total']} ({hashtags['unique']} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö)")
            
            if mentions.get("total", 0) > 0:
                st.metric("–£–ø–æ–º–∏–Ω–∞–Ω–∏–π", f"{mentions['total']} ({mentions['unique']} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö)")
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–µ—Å–ª–∏ –±—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω)
        filtered_keywords = keyword_analysis.get("filtered_keywords")
        if filtered_keywords:
            st.write("**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:**")
            for keyword, count in filtered_keywords.items():
                st.write(f"- **{keyword}**: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    # –ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏–∞
    if media_analysis and media_analysis.get("total_media", 0) > 0:
        st.write("### üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã")
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–í—Å–µ–≥–æ –º–µ–¥–∏–∞", media_analysis["total_media"])
        with col2:
            st.metric("% —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞", f"{media_analysis.get('media_percentage', 0)}%")
        
        # –¢–∏–ø—ã –º–µ–¥–∏–∞
        media_types = media_analysis.get("media_types", {})
        if media_types:
            media_df = pd.DataFrame(list(media_types.items()), columns=["–¢–∏–ø", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
            
            fig_media = px.pie(
                media_df,
                values="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                names="–¢–∏–ø",
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"
            )
            st.plotly_chart(fig_media, use_container_width=True)
    
    # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    st.write("### üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2, col3 = st.columns([1, 1, 2])
    
    with col1:
        if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç CSV", key=f"export_csv_{analysis_id}"):
            export_data("csv", analysis_id)
    
    with col2:
        if st.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç JSON", key=f"export_json_{analysis_id}"):
            export_data("json", analysis_id)
    
    with col3:
        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–Ω–∞–ª–∏–∑", key=f"delete_{analysis_id}"):
            delete_response = api_client.delete_analysis(analysis_id)
            if delete_response:
                st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ —É–¥–∞–ª–µ–Ω")
                st.rerun()


def export_data(format_type: str, analysis_id: str):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞"""
    export_request = {
        "analysis_id": analysis_id,
        "format": format_type
    }
    
    with st.spinner(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ {format_type.upper()}..."):
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        st.info(f"üí° –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_type.upper()} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")


def show_analysis_history():
    """–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤"""
    st.subheader("üìã –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –∏–∑ analytics API
    analyses_response = api_client.list_analyses()
    analyses = analyses_response.get("analyses", []) if analyses_response else []
    
    if not analyses:
        st.info("üì≠ –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –ø—É—Å—Ç–∞")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
    history_data = []
    for analysis in analyses:
        status_icon = "‚úÖ" if analysis["status"] == "completed" else "üîÑ" if analysis["status"] == "in_progress" else "‚ùå"
        history_data.append({
            "–°—Ç–∞—Ç—É—Å": f"{status_icon} {analysis['status']}",
            "–ß–∞—Ç": analysis["chat_title"],
            "–°–æ–æ–±—â–µ–Ω–∏–π": analysis["total_messages"],
            "–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤": analysis.get("analyzed_participants", 0),
            "ID": analysis["analysis_id"][:8] + "..."
        })
    
    if history_data:
        df_history = pd.DataFrame(history_data)
        st.dataframe(df_history, use_container_width=True)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é", type="secondary"):
            if st.session_state.get("confirm_clear_history"):
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∞–Ω–∞–ª–∏–∑—ã
                deleted_count = 0
                for analysis in analyses:
                    response = api_client.delete_analysis(analysis['analysis_id'])
                    if response:
                        deleted_count += 1
                
                st.success(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ ({deleted_count} –∞–Ω–∞–ª–∏–∑–æ–≤ —É–¥–∞–ª–µ–Ω–æ)")
                st.session_state.confirm_clear_history = False
                st.rerun()
            else:
                st.session_state.confirm_clear_history = True
                st.warning("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")


def show_demo_analytics_page():
    """–î–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    st.header("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —á–∞—Ç–æ–≤ (–î–µ–º–æ-—Ä–µ–∂–∏–º)")
    st.warning("‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–∫–∞–∑–∞–Ω –¥–µ–º–æ-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    
    st.info("–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ Telegram-—á–∞—Ç–∞—Ö, –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
    
    # –î–µ–º–æ —Ñ–æ—Ä–º–∞
    with st.expander("üîç –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º—ã –∞–Ω–∞–ª–∏–∑–∞", expanded=True):
        st.selectbox("–ß–∞—Ç:", ["@tech_news_channel", "@startup_chat", "@crypto_discussions"])
        
        col1, col2 = st.columns(2)
        with col1:
            st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:", value=datetime.now().date() - timedelta(days=30))
            st.number_input("–ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π:", value=1000)
        
        with col2:
            st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:", value=datetime.now().date())
            st.checkbox("–ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=True)
        
        st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", disabled=True)
    
    # –î–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.write("### üìä –ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π", "1,247")
    with col2:
        st.metric("–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "85")
    with col3:
        st.metric("–°–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å", "41.6")
    with col4:
        st.metric("–° –º–µ–¥–∏–∞", "23%")
    
    # –î–µ–º–æ –≥—Ä–∞—Ñ–∏–∫
    st.write("**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º:**")
    demo_hours = list(range(24))
    demo_activity = [5, 3, 1, 0, 0, 2, 8, 15, 25, 30, 45, 50, 55, 48, 40, 35, 38, 42, 35, 28, 20, 15, 10, 7]
    
    fig = px.bar(x=demo_hours, y=demo_activity, title="–î–µ–º–æ: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º")
    fig.update_layout(showlegend=False)
    st.plotly_chart(fig, use_container_width=True)