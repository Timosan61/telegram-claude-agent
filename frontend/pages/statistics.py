import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import time
import json

from frontend.components.api_client import api_client


def show_statistics_page():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    st.header("üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    st.markdown("–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã Telegram Claude Agent —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_health = api_client.make_request("/statistics/health")
    
    if not stats_health:
        st.error("‚ùå –°–µ—Ä–≤–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        st.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        show_demo_statistics_page()
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üéØ –î–∞—à–±–æ—Ä–¥", "üìà –¢—Ä–µ–Ω–¥—ã", "üéØ –ö–∞–º–ø–∞–Ω–∏–∏", "üí¨ –ß–∞—Ç—ã", "‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞"
    ])
    
    with tab1:
        show_dashboard_tab()
    
    with tab2:
        show_trends_tab()
    
    with tab3:
        show_campaigns_tab()
    
    with tab4:
        show_chats_tab()
    
    with tab5:
        show_system_tab()


def show_dashboard_tab():
    """–ì–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    st.subheader("üéØ –û–±—â–∏–π –¥–∞—à–±–æ—Ä–¥")
    
    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    col1, col2 = st.columns([1, 4])
    with col1:
        auto_refresh = st.checkbox("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", key="dashboard_refresh")
    with col2:
        if st.button("üìä –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", key="dashboard_update"):
            st.rerun()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
    dashboard_data = api_client.make_request("/statistics/dashboard")
    
    if not dashboard_data:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞")
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    st.write("### üìã –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    
    campaigns = dashboard_data.get("campaigns", {})
    activity = dashboard_data.get("activity_24h", {})
    system = dashboard_data.get("system", {})
    
    # –í–µ—Ä—Ö–Ω–∏–π —Ä—è–¥ –º–µ—Ç—Ä–∏–∫
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π", campaigns.get("total", 0))
        st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö", campaigns.get("active", 0))
    
    with col2:
        st.metric("–°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 24—á", activity.get("messages_processed", 0))
        st.metric("–û—Ç–≤–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", activity.get("responses_sent", 0))
    
    with col3:
        success_rate = activity.get("success_rate", 0)
        st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", f"{success_rate}%")
        st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤", activity.get("active_chats", 0))
    
    with col4:
        avg_time = activity.get("avg_response_time_ms", 0)
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", f"{avg_time:.0f}–º—Å")
        uptime = system.get("uptime_hours", 0)
        st.metric("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã", f"{uptime:.1f}—á")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    st.write("### üíª –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        cpu = system.get("cpu_usage_percent", 0)
        st.metric("CPU", f"{cpu:.1f}%")
    
    with col2:
        memory = system.get("memory_usage_percent", 0)
        st.metric("–ü–∞–º—è—Ç—å", f"{memory:.1f}%")
    
    with col3:
        api_requests = system.get("api_requests", 0)
        st.metric("API –∑–∞–ø—Ä–æ—Å–æ–≤", api_requests)
    
    # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ 24 —á–∞—Å–∞
    st.write("### üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 24 —á–∞—Å–∞")
    
    historical_data = api_client.make_request("/statistics/historical?days_back=1")
    if historical_data:
        hourly_stats = historical_data.get("historical_data", {}).get("hourly_stats", [])
        
        if hourly_stats:
            df_hourly = pd.DataFrame(hourly_stats)
            
            fig = make_subplots(specs=[[{"secondary_y": True}]])
            
            # –°–æ–æ–±—â–µ–Ω–∏—è
            fig.add_trace(
                go.Scatter(
                    x=df_hourly['hour'],
                    y=df_hourly['messages_processed'],
                    name="–°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
                    line=dict(color="blue")
                ),
                secondary_y=False
            )
            
            # –û—Ç–≤–µ—Ç—ã
            fig.add_trace(
                go.Scatter(
                    x=df_hourly['hour'],
                    y=df_hourly['responses_sent'],
                    name="–û—Ç–≤–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                    line=dict(color="green")
                ),
                secondary_y=False
            )
            
            fig.update_xaxes(title_text="–ß–∞—Å")
            fig.update_yaxes(title_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", secondary_y=False)
            fig.update_layout(
                title="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º",
                hovermode='x unified'
            )
            
            st.plotly_chart(fig, use_container_width=True)
    
    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if auto_refresh:
        time.sleep(10)
        st.rerun()


def show_trends_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Å —Ç—Ä–µ–Ω–¥–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    st.subheader("üìà –¢—Ä–µ–Ω–¥—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    # –í—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫–∏ –∏ –ø–µ—Ä–∏–æ–¥–∞
    col1, col2 = st.columns(2)
    
    with col1:
        metric_type = st.selectbox(
            "–ú–µ—Ç—Ä–∏–∫–∞:",
            options=["response_time", "cpu_usage", "memory_usage", "api_calls"],
            format_func=lambda x: {
                "response_time": "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞",
                "cpu_usage": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU",
                "memory_usage": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏",
                "api_calls": "API –≤—ã–∑–æ–≤—ã"
            }.get(x, x)
        )
    
    with col2:
        hours_back = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥:",
            options=[1, 6, 24, 72, 168],
            format_func=lambda x: f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {x}—á",
            index=2
        )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–¥—ã
    trends_data = api_client.make_request(
        f"/statistics/performance/trends?metric_type={metric_type}&hours_back={hours_back}"
    )
    
    if trends_data and trends_data.get("trends"):
        trends = trends_data["trends"]
        df_trends = pd.DataFrame(trends)
        
        if not df_trends.empty:
            # –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤
            fig = px.line(
                df_trends,
                x='timestamp',
                y='value',
                title=f"–¢—Ä–µ–Ω–¥: {trends_data['metric_type']}",
                labels={'timestamp': '–í—Ä–µ–º—è', 'value': f"–ó–Ω–∞—á–µ–Ω–∏–µ ({df_trends['unit'].iloc[0]})"}
            )
            
            fig.update_layout(
                hovermode='x unified',
                xaxis_title="–í—Ä–µ–º—è",
                yaxis_title=f"–ó–Ω–∞—á–µ–Ω–∏–µ ({df_trends['unit'].iloc[0]})"
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("–°—Ä–µ–¥–Ω–µ–µ", f"{df_trends['value'].mean():.2f}")
            with col2:
                st.metric("–ú–∞–∫—Å–∏–º—É–º", f"{df_trends['value'].max():.2f}")
            with col3:
                st.metric("–ú–∏–Ω–∏–º—É–º", f"{df_trends['value'].min():.2f}")
            with col4:
                st.metric("–¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö", len(df_trends))
        else:
            st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")
    else:
        st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    st.write("### üìÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
    
    days_back = st.slider("–ü–µ—Ä–∏–æ–¥ (–¥–Ω–∏):", 1, 30, 7)
    
    historical_data = api_client.make_request(f"/statistics/historical?days_back={days_back}")
    
    if historical_data:
        daily_stats = historical_data.get("historical_data", {}).get("daily_stats", [])
        
        if daily_stats:
            df_daily = pd.DataFrame(daily_stats)
            
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –¥–Ω—è–º
            fig = make_subplots(specs=[[{"secondary_y": True}]])
            
            fig.add_trace(
                go.Bar(
                    x=df_daily['date'],
                    y=df_daily['messages_processed'],
                    name="–°–æ–æ–±—â–µ–Ω–∏—è",
                    opacity=0.7,
                    marker_color="lightblue"
                ),
                secondary_y=False
            )
            
            fig.add_trace(
                go.Scatter(
                    x=df_daily['date'],
                    y=df_daily['success_rate'],
                    name="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)",
                    line=dict(color="red", width=3)
                ),
                secondary_y=True
            )
            
            fig.update_xaxes(title_text="–î–∞—Ç–∞")
            fig.update_yaxes(title_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π", secondary_y=False)
            fig.update_yaxes(title_text="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)", secondary_y=True)
            fig.update_layout(title="–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º")
            
            st.plotly_chart(fig, use_container_width=True)


def show_campaigns_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º"""
    st.subheader("üéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π")
    
    # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
    hours_back = st.selectbox(
        "–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:",
        options=[1, 6, 24, 72, 168],
        format_func=lambda x: f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {x} —á–∞—Å–æ–≤",
        index=2
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–º–ø–∞–Ω–∏–π
    campaigns_data = api_client.make_request(f"/statistics/campaigns?hours_back={hours_back}")
    
    if not campaigns_data or not campaigns_data.get("campaigns"):
        st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")
        return
    
    campaigns = campaigns_data["campaigns"]
    df_campaigns = pd.DataFrame(campaigns)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–ö–∞–º–ø–∞–Ω–∏–π –≤ –∞–Ω–∞–ª–∏–∑–µ", len(campaigns))
    with col2:
        total_messages = df_campaigns['messages_processed'].sum()
        st.metric("–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π", total_messages)
    with col3:
        total_responses = df_campaigns['responses_sent'].sum()
        success_rate = (total_responses / max(1, total_messages)) * 100
        st.metric("–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å", f"{success_rate:.1f}%")
    
    # –¢–æ–ø –∫–∞–º–ø–∞–Ω–∏–π
    st.write("### üèÜ –¢–æ–ø –∫–∞–º–ø–∞–Ω–∏–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    top_campaigns = df_campaigns.nlargest(10, 'messages_processed')
    
    fig = px.bar(
        top_campaigns,
        x='campaign_name',
        y='messages_processed',
        color='success_rate',
        title="–¢–æ–ø-10 –∫–∞–º–ø–∞–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
        labels={'messages_processed': '–°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ', 'campaign_name': '–ö–∞–º–ø–∞–Ω–∏—è'},
        color_continuous_scale='Viridis'
    )
    
    fig.update_layout(xaxis_tickangle=-45)
    st.plotly_chart(fig, use_container_width=True)
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    st.write("### üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    display_columns = [
        'campaign_name', 'messages_processed', 'responses_sent', 
        'success_rate', 'avg_response_time_ms', 'unique_chats_active'
    ]
    
    display_df = df_campaigns[display_columns].copy()
    display_df.columns = [
        '–ö–∞–º–ø–∞–Ω–∏—è', '–°–æ–æ–±—â–µ–Ω–∏–π', '–û—Ç–≤–µ—Ç–æ–≤', 
        '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å %', '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º—Å)', '–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤'
    ]
    
    # –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
    def color_success_rate(val):
        if val >= 80:
            return 'background-color: #d4edda'
        elif val >= 60:
            return 'background-color: #fff3cd'
        else:
            return 'background-color: #f8d7da'
    
    styled_df = display_df.style.applymap(color_success_rate, subset=['–£—Å–ø–µ—à–Ω–æ—Å—Ç—å %'])
    st.dataframe(styled_df, use_container_width=True)
    
    # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    if not df_campaigns.empty and 'keywords_triggered' in df_campaigns.columns:
        st.write("### üî§ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
        
        all_keywords = {}
        for _, campaign in df_campaigns.iterrows():
            keywords = campaign.get('keywords_triggered', {})
            if isinstance(keywords, dict):
                for keyword, count in keywords.items():
                    all_keywords[keyword] = all_keywords.get(keyword, 0) + count
        
        if all_keywords:
            # –¢–æ–ø-20 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            top_keywords = sorted(all_keywords.items(), key=lambda x: x[1], reverse=True)[:20]
            
            if top_keywords:
                keywords_df = pd.DataFrame(top_keywords, columns=['–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
                
                fig = px.bar(
                    keywords_df.head(10),
                    x='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                    y='–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ',
                    orientation='h',
                    title="–¢–æ–ø-10 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤",
                    labels={'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π'}
                )
                
                fig.update_layout(yaxis={'categoryorder':'total ascending'})
                st.plotly_chart(fig, use_container_width=True)


def show_chats_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —á–∞—Ç–∞–º"""
    st.subheader("üí¨ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤")
    
    # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
    hours_back = st.selectbox(
        "–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:",
        options=[1, 6, 24, 72, 168],
        format_func=lambda x: f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {x} —á–∞—Å–æ–≤",
        index=2,
        key="chats_period"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–æ–≤
    chats_data = api_client.make_request(f"/statistics/chats?hours_back={hours_back}")
    
    if not chats_data or not chats_data.get("chats"):
        st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–∞—Ç–∞–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")
        return
    
    chats = chats_data["chats"]
    df_chats = pd.DataFrame(chats)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤", len(chats))
    with col2:
        total_messages = df_chats['messages_count'].sum()
        st.metric("–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π", total_messages)
    with col3:
        total_responses = df_chats['bot_responses_count'].sum()
        st.metric("–û—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞", total_responses)
    with col4:
        avg_response_rate = df_chats['response_rate'].mean()
        st.metric("–°—Ä–µ–¥–Ω–∏–π –æ—Ç–∫–ª–∏–∫", f"{avg_response_rate:.1f}%")
    
    # –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
    st.write("### üèÜ –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã")
    
    top_chats = df_chats.nlargest(10, 'messages_count')
    
    fig = px.bar(
        top_chats,
        x='chat_title',
        y='messages_count',
        color='response_rate',
        title="–¢–æ–ø-10 —á–∞—Ç–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        labels={'messages_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π', 'chat_title': '–ß–∞—Ç'},
        color_continuous_scale='Blues'
    )
    
    fig.update_layout(xaxis_tickangle=-45)
    st.plotly_chart(fig, use_container_width=True)
    
    # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    st.write("### ‚è∞ –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å–∞–º –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    all_hours_data = {}
    for _, chat in df_chats.iterrows():
        messages_per_hour = chat.get('messages_per_hour', {})
        if isinstance(messages_per_hour, dict):
            for hour, count in messages_per_hour.items():
                try:
                    hour_int = int(hour)
                    all_hours_data[hour_int] = all_hours_data.get(hour_int, 0) + count
                except (ValueError, TypeError):
                    continue
    
    if all_hours_data:
        hours_df = pd.DataFrame([
            {'hour': hour, 'messages': count}
            for hour, count in sorted(all_hours_data.items())
        ])
        
        fig = px.bar(
            hours_df,
            x='hour',
            y='messages',
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º",
            labels={'hour': '–ß–∞—Å', 'messages': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π'}
        )
        
        fig.update_xaxes(tickmode='linear', dtick=2)
        st.plotly_chart(fig, use_container_width=True)
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —á–∞—Ç–æ–≤
    st.write("### üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤")
    
    display_columns = [
        'chat_title', 'messages_count', 'bot_responses_count', 
        'response_rate', 'unique_users_count', 'avg_message_length'
    ]
    
    display_df = df_chats[display_columns].copy()
    display_df.columns = [
        '–ß–∞—Ç', '–°–æ–æ–±—â–µ–Ω–∏–π', '–û—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞', 
        '–û—Ç–∫–ª–∏–∫ %', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', '–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞'
    ]
    
    st.dataframe(display_df, use_container_width=True)


def show_system_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    st.subheader("‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    system_data = api_client.make_request("/statistics/system")
    
    if not system_data:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    st.write("### üíª –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        uptime = system_data.get('system_uptime_hours', 0)
        st.metric("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã", f"{uptime:.1f}—á")
    
    with col2:
        cpu = system_data.get('cpu_usage_percent', 0)
        st.metric("CPU", f"{cpu:.1f}%")
    
    with col3:
        memory = system_data.get('memory_usage_mb', 0)
        st.metric("–ü–∞–º—è—Ç—å", f"{memory:.0f}–ú–ë")
    
    with col4:
        api_requests = system_data.get('api_requests_count', 0)
        st.metric("API –∑–∞–ø—Ä–æ—Å–æ–≤", api_requests)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API
    st.write("### üåê API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        api_errors = system_data.get('api_errors_count', 0)
        error_rate = (api_errors / max(1, api_requests)) * 100
        st.metric("–û—à–∏–±–∫–∏ API", api_errors)
        st.metric("–ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫", f"{error_rate:.1f}%")
    
    with col2:
        avg_api_time = system_data.get('avg_api_response_time_ms', 0)
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è API", f"{avg_api_time:.1f}–º—Å")
    
    with col3:
        telegram_calls = system_data.get('telegram_api_calls', 0)
        rate_limits = system_data.get('telegram_rate_limit_hits', 0)
        st.metric("–í—ã–∑–æ–≤–æ–≤ Telegram API", telegram_calls)
        st.metric("Rate limit", rate_limits)
    
    # Telegram —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.write("### üì± Telegram —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    col1, col2 = st.columns(2)
    
    with col1:
        telegram_connected = system_data.get('telegram_connected', False)
        connection_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if telegram_connected else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
        st.metric("–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", connection_status)
    
    with col2:
        telegram_uptime = system_data.get('telegram_connection_uptime_hours', 0)
        st.metric("–í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", f"{telegram_uptime:.1f}—á")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    st.write("### ‚ö° –ú–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"):
        realtime_data = api_client.make_request("/statistics/realtime")
        
        if realtime_data:
            rt_system = realtime_data.get('system', {})
            rt_service = realtime_data.get('service', {})
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("CPU —Å–µ–π—á–∞—Å", f"{rt_system.get('cpu_percent', 0):.1f}%")
            with col2:
                st.metric("–ü–∞–º—è—Ç—å —Å–µ–π—á–∞—Å", f"{rt_system.get('memory_percent', 0):.1f}%")
            with col3:
                uptime_sec = rt_service.get('uptime_seconds', 0)
                uptime_min = uptime_sec / 60
                st.metric("Uptime", f"{uptime_min:.1f}–º–∏–Ω")
            with col4:
                st.metric("API –∑–∞–ø—Ä–æ—Å–æ–≤", rt_service.get('api_requests_total', 0))
            
            # –ì—Ä–∞—Ñ–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            memory_used = rt_system.get('memory_used_mb', 0)
            memory_available = rt_system.get('memory_available_mb', 0)
            memory_total = memory_used + memory_available
            
            if memory_total > 0:
                fig = go.Figure(data=[
                    go.Pie(
                        labels=['–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è', '–î–æ—Å—Ç—É–ø–Ω–æ'],
                        values=[memory_used, memory_available],
                        hole=.3,
                        title="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"
                    )
                ])
                
                st.plotly_chart(fig, use_container_width=True)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    st.write("### üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìä –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"):
            with st.spinner("–°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É..."):
                result = api_client.make_request("/statistics/collect/all", method="POST")
                if result:
                    st.success("‚úÖ –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                    st.json(result.get("collected", {}))
    
    with col2:
        days_to_cleanup = st.number_input("–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—à–µ (–¥–Ω–∏):", 7, 90, 30)
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
            with st.spinner("–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ..."):
                result = api_client.make_request(
                    f"/statistics/cleanup?days_older_than={days_to_cleanup}", 
                    method="DELETE"
                )
                if result:
                    st.success("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    st.info(f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result.get('total_deleted', 0)}")


def show_demo_statistics_page():
    """–î–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    st.header("üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–î–µ–º–æ-—Ä–µ–∂–∏–º)")
    st.warning("‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–∫–∞–∑–∞–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π", "5")
        st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö", "3")
    
    with col2:
        st.metric("–°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 24—á", "1,247")
        st.metric("–û—Ç–≤–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "892")
    
    with col3:
        st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "71.5%")
        st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤", "12")
    
    with col4:
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", "1,340–º—Å")
        st.metric("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã", "47.2—á")
    
    # –î–µ–º–æ –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    st.write("### üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 24 —á–∞—Å–∞ (–¥–µ–º–æ)")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    demo_hours = list(range(24))
    demo_messages = [5, 3, 1, 0, 0, 2, 8, 15, 25, 30, 45, 50, 55, 48, 40, 35, 38, 42, 35, 28, 20, 15, 10, 7]
    demo_responses = [int(m * 0.7) for m in demo_messages]
    
    fig = make_subplots(specs=[[{"secondary_y": True}]])
    
    fig.add_trace(
        go.Scatter(x=demo_hours, y=demo_messages, name="–°–æ–æ–±—â–µ–Ω–∏—è", line=dict(color="blue")),
        secondary_y=False
    )
    
    fig.add_trace(
        go.Scatter(x=demo_hours, y=demo_responses, name="–û—Ç–≤–µ—Ç—ã", line=dict(color="green")),
        secondary_y=False
    )
    
    fig.update_layout(title="–î–µ–º–æ: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º")
    st.plotly_chart(fig, use_container_width=True)
    
    # –î–µ–º–æ —Ç–æ–ø –∫–∞–º–ø–∞–Ω–∏–π
    st.write("### üèÜ –¢–æ–ø –∫–∞–º–ø–∞–Ω–∏–π (–¥–µ–º–æ)")
    
    demo_campaigns = pd.DataFrame({
        '–ö–∞–º–ø–∞–Ω–∏—è': ['–ù–æ–≤–æ—Å—Ç–∏', '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
        '–°–æ–æ–±—â–µ–Ω–∏–π': [324, 267, 189, 156],
        '–û—Ç–≤–µ—Ç–æ–≤': [231, 203, 142, 98],
        '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å %': [71.3, 76.0, 75.1, 62.8]
    })
    
    fig = px.bar(
        demo_campaigns,
        x='–ö–∞–º–ø–∞–Ω–∏—è',
        y='–°–æ–æ–±—â–µ–Ω–∏–π',
        color='–£—Å–ø–µ—à–Ω–æ—Å—Ç—å %',
        title="–î–µ–º–æ: –¢–æ–ø –∫–∞–º–ø–∞–Ω–∏–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        color_continuous_scale='Viridis'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –î–µ–º–æ —Ç–∞–±–ª–∏—Ü–∞
    st.dataframe(demo_campaigns)