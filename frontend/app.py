import streamlit as st
import requests
import pandas as pd
import json
from datetime import datetime, timedelta
import time

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
from pages.analytics import show_analytics_page, show_demo_analytics_page
from pages.statistics import show_statistics_page, show_demo_statistics_page

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Telegram Claude Agent",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ –≤ Streamlit Cloud –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
try:
    import streamlit as st
    # –í Streamlit Cloud –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ secrets –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π URL
    API_BASE_URL = st.secrets.get("BACKEND_API_URL", "http://127.0.0.1:8000")
except:
    # Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ secrets
    API_BASE_URL = "http://127.0.0.1:8000"


def make_api_request(endpoint, method="GET", data=None):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
    try:
        url = f"{API_BASE_URL}{endpoint}"
        
        if method == "GET":
            response = requests.get(url)
        elif method == "POST":
            response = requests.post(url, json=data)
        elif method == "PUT":
            response = requests.put(url, json=data)
        elif method == "DELETE":
            response = requests.delete(url)
        
        if response.status_code in [200, 201]:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return None
    
    except requests.exceptions.ConnectionError:
        if "127.0.0.1" in API_BASE_URL or "localhost" in API_BASE_URL:
            st.error("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:8000")
        else:
            st.error(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ backend —Å–µ—Ä–≤–µ—Ä—É: `{API_BASE_URL}`")
            st.markdown("**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**")
            st.markdown("- Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            st.markdown("- –ù–µ–≤–µ—Ä–Ω—ã–π URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Streamlit Cloud")
            st.markdown("- –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
        return None
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None


def check_server_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=3)
        if response.status_code == 200:
            return response.json()
    except Exception as e:
        # –í –æ–±–ª–∞—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        return None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.title("ü§ñ Telegram Claude Agent")
    st.markdown("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–∞–≥–µ–Ω—Ç–æ–º –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram-—á–∞—Ç–æ–≤")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
    if "127.0.0.1" not in API_BASE_URL and "localhost" not in API_BASE_URL:
        st.info(f"üåê **–û–±–ª–∞—á–Ω—ã–π —Ä–µ–∂–∏–º**: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ backend —Å–µ—Ä–≤–µ—Ä—É `{API_BASE_URL}`")
        st.markdown("""
        **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ**: –≠—Ç–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏—è–º–∏. 
        –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Telegram-–∞–≥–µ–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–π backend —Å–µ—Ä–≤–µ—Ä.
        """)
    else:
        st.success(f"üè† **–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º**: Backend —Å–µ—Ä–≤–µ—Ä `{API_BASE_URL}`")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    server_status = check_server_status()
    
    if server_status:
        col1, col2, col3 = st.columns(3)
        with col1:
            status_color = "üü¢" if server_status.get("status") == "healthy" else "üî¥"
            st.metric("–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", f"{status_color} {server_status.get('status', 'unknown')}")
        
        with col2:
            telegram_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if server_status.get("telegram_connected") else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
            st.metric("Telegram", telegram_status)
        
        with col3:
            db_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if server_status.get("database") == "connected" else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞"
            st.metric("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", db_status)
    else:
        st.warning("‚ö†Ô∏è Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        st.info("–í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É",
        ["üè¢ –ö–æ–º–ø–∞–Ω–∏—è", "üìã –ö–∞–º–ø–∞–Ω–∏–∏", "üí¨ –ß–∞—Ç—ã", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —á–∞—Ç–æ–≤", "üìù –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    )
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page == "üè¢ –ö–æ–º–ø–∞–Ω–∏—è":
        if server_status:
            show_company_page()
        else:
            show_demo_company_page()
    elif page == "üìã –ö–∞–º–ø–∞–Ω–∏–∏":
        if server_status:
            show_campaigns_page()
        else:
            show_demo_campaigns_page()
    elif page == "üí¨ –ß–∞—Ç—ã":
        if server_status:
            show_chats_page()
        else:
            show_demo_chats_page()
    elif page == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        if server_status:
            show_statistics_page()
        else:
            show_demo_statistics_page()
    elif page == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —á–∞—Ç–æ–≤":
        if server_status:
            show_analytics_page()
        else:
            show_demo_analytics_page()
    elif page == "üìù –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏":
        if server_status:
            show_logs_page()
        else:
            show_demo_logs_page()
    elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        show_settings_page()


def show_campaigns_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏—è–º–∏"""
    st.header("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏—è–º–∏")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π
    campaigns_data = make_api_request("/campaigns/")
    
    if campaigns_data is None:
        return
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2 = st.columns([1, 1])
    with col1:
        if st.button("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é", type="primary"):
            st.session_state.show_create_form = True
    
    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –∫–∞–º–ø–∞–Ω–∏–π", help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π"):
            refresh_response = make_api_request("/campaigns/refresh-cache", method="POST")
            if refresh_response:
                st.success("‚úÖ –ö—ç—à –∫–∞–º–ø–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω!")
                st.info("üí° –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥")
                time.sleep(1)
                st.rerun()
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞")
    
    # –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
    if st.session_state.get('show_create_form', False):
        show_campaign_form()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π
    if campaigns_data:
        st.subheader(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ ({len(campaigns_data)})")
        
        for campaign in campaigns_data:
            with st.expander(f"üéØ {campaign['name']}", expanded=False):
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.write(f"**ID:** {campaign['id']}")
                    st.write(f"**–ê–∫–∫–∞—É–Ω—Ç Telegram:** {campaign['telegram_account']}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
                    ai_provider = campaign.get('ai_provider', 'claude')
                    if ai_provider == 'claude':
                        st.write(f"**AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä:** üß† Claude ({campaign.get('claude_agent_id', 'N/A')})")
                    else:
                        st.write(f"**AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä:** ü§ñ OpenAI ({campaign.get('openai_model', 'gpt-4')})")
                    
                    st.write(f"**–ß–∞—Ç—ã:** {', '.join(campaign['telegram_chats'])}")
                    st.write(f"**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** {', '.join(campaign['keywords'])}")
                    st.write(f"**–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π:** {campaign['context_messages_count']}")
                    
                    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
                    with st.expander("–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"):
                        st.text_area(
                            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:",
                            value=campaign['system_instruction'],
                            height=100,
                            disabled=True,
                            key=f"instruction_{campaign['id']}"
                        )
                
                with col2:
                    # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    status_color = "üü¢" if campaign['active'] else "üî¥"
                    status_text = "–ê–∫—Ç–∏–≤–Ω–∞" if campaign['active'] else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
                    st.write(f"**–°—Ç–∞—Ç—É—Å:** {status_color} {status_text}")
                    
                    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    if st.button(
                        "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        key=f"toggle_{campaign['id']}"
                    ):
                        toggle_campaign_status(campaign['id'])
                        st.rerun()
                    
                    if st.button(
                        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                        key=f"edit_{campaign['id']}"
                    ):
                        st.session_state.edit_campaign_id = campaign['id']
                        st.session_state.show_edit_form = True
                        st.rerun()
                    
                    if st.button(
                        "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                        key=f"delete_{campaign['id']}",
                        type="secondary"
                    ):
                        if st.session_state.get(f'confirm_delete_{campaign["id"]}', False):
                            delete_campaign(campaign['id'])
                            st.rerun()
                        else:
                            st.session_state[f'confirm_delete_{campaign["id"]}'] = True
                            st.warning("–ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
    else:
        st.info("üìù –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
    
    # –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if st.session_state.get('show_edit_form', False):
        edit_campaign_id = st.session_state.get('edit_campaign_id')
        if edit_campaign_id:
            campaign_data = next(
                (c for c in campaigns_data if c['id'] == edit_campaign_id), 
                None
            )
            if campaign_data:
                show_campaign_form(edit_data=campaign_data)


def show_campaign_form(edit_data=None):
    """–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏"""
    is_edit = edit_data is not None
    form_title = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏" if is_edit else "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏"
    
    st.subheader(form_title)
    
    with st.form(key="campaign_form"):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        name = st.text_input(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏*",
            value=edit_data.get('name', '') if is_edit else '',
            help="–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏"
        )
        
        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.subheader("üîµ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram")
        
        telegram_account = st.text_input(
            "–ê–∫–∫–∞—É–Ω—Ç Telegram*",
            value=edit_data.get('telegram_account', '') if is_edit else '',
            help="–ò–º—è –∏–ª–∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –æ—Ç–≤–µ—Ç—ã"
        )
        
        telegram_chats_text = st.text_area(
            "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —á–∞—Ç—ã*",
            value='\\n'.join(edit_data.get('telegram_chats', [])) if is_edit else '',
            help="–ü–æ –æ–¥–Ω–æ–º—É ID –∏–ª–∏ username —á–∞—Ç–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: @mychat –∏–ª–∏ -1001234567890)"
        )
        
        keywords_text = st.text_area(
            "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞*",
            value='\\n'.join(edit_data.get('keywords', [])) if is_edit else '',
            help="–ü–æ –æ–¥–Ω–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –Ω–∞ —Å—Ç—Ä–æ–∫—É"
        )
        
        # AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.subheader("üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
        
        # –í—ã–±–æ—Ä AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        ai_provider = st.selectbox(
            "AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä*",
            options=["claude", "openai"],
            index=0 if not is_edit or edit_data.get('ai_provider', 'claude') == 'claude' else 1,
            help="–í—ã–±–µ—Ä–∏—Ç–µ AI –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Claude (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω Claude)
        if ai_provider == "claude":
            claude_agent_id = st.text_input(
                "ID Claude –∞–≥–µ–Ω—Ç–∞*",
                value=edit_data.get('claude_agent_id', '') if is_edit else '',
                help="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–ª–∏ alias Claude Code –∞–≥–µ–Ω—Ç–∞"
            )
        else:
            claude_agent_id = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω OpenAI)
        if ai_provider == "openai":
            openai_model = st.selectbox(
                "–ú–æ–¥–µ–ª—å OpenAI*",
                options=["gpt-4", "gpt-3.5-turbo", "gpt-4-turbo-preview"],
                index=0 if not is_edit else ["gpt-4", "gpt-3.5-turbo", "gpt-4-turbo-preview"].index(edit_data.get('openai_model', 'gpt-4')),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"
            )
        else:
            openai_model = "gpt-4"
        
        context_messages_count = st.number_input(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
            min_value=1,
            max_value=20,
            value=edit_data.get('context_messages_count', 3) if is_edit else 3,
            help="–°–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        )
        
        system_instruction = st.text_area(
            "–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è*",
            value=edit_data.get('system_instruction', '') if is_edit else '',
            height=150,
            help="–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω —Å–µ–±—è –≤–µ—Å—Ç–∏ –∞–≥–µ–Ω—Ç"
        )
        
        # –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤
        st.subheader("üí¨ –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤")
        example_replies_text = st.text_area(
            "–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ (JSON)",
            value=json.dumps(edit_data.get('example_replies', {}), ensure_ascii=False, indent=2) if is_edit and edit_data.get('example_replies') else '{}',
            height=100,
            help="JSON –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"
        )
        
        # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        active = st.checkbox(
            "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é —Å—Ä–∞–∑—É",
            value=edit_data.get('active', False) if is_edit else False
        )
        
        # –ö–Ω–æ–ø–∫–∏
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col1:
            submit_button = st.form_submit_button(
                "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å" if is_edit else "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é",
                type="primary"
            )
        
        with col2:
            if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
                st.session_state.show_create_form = False
                st.session_state.show_edit_form = False
                if 'edit_campaign_id' in st.session_state:
                    del st.session_state.edit_campaign_id
                st.rerun()
        
        if submit_button:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
            required_fields = [name, telegram_account, telegram_chats_text, keywords_text, system_instruction]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ–ª—è
            if ai_provider == "claude" and not claude_agent_id:
                st.error("‚ùå ID Claude –∞–≥–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ Claude")
                return
            elif ai_provider == "openai" and not openai_model:
                st.error("‚ùå –ú–æ–¥–µ–ª—å OpenAI –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ OpenAI") 
                return
            
            if not all(required_fields):
                st.error("‚ùå –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
                return
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            telegram_chats = [chat.strip() for chat in telegram_chats_text.split('\\n') if chat.strip()]
            keywords = [keyword.strip() for keyword in keywords_text.split('\\n') if keyword.strip()]
            
            try:
                example_replies = json.loads(example_replies_text) if example_replies_text.strip() else {}
            except json.JSONDecodeError:
                st.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö –æ—Ç–≤–µ—Ç–æ–≤")
                return
            
            campaign_data = {
                "name": name,
                "telegram_chats": telegram_chats,
                "keywords": keywords,
                "telegram_account": telegram_account,
                "ai_provider": ai_provider,
                "claude_agent_id": claude_agent_id if ai_provider == "claude" else None,
                "openai_model": openai_model if ai_provider == "openai" else "gpt-4",
                "context_messages_count": context_messages_count,
                "system_instruction": system_instruction,
                "example_replies": example_replies,
                "active": active
            }
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if is_edit:
                response = make_api_request(
                    f"/campaigns/{edit_data['id']}",
                    method="PUT",
                    data=campaign_data
                )
            else:
                response = make_api_request(
                    "/campaigns/",
                    method="POST",
                    data=campaign_data
                )
            
            if response:
                success_message = "‚úÖ –ö–∞–º–ø–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!" if is_edit else "‚úÖ –ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞!"
                st.success(success_message)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
                if is_edit:
                    st.info("üîÑ –ö—ç—à –∫–∞–º–ø–∞–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω. –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥.")
                
                # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
                st.session_state.show_create_form = False
                st.session_state.show_edit_form = False
                if 'edit_campaign_id' in st.session_state:
                    del st.session_state.edit_campaign_id
                
                time.sleep(1)
                st.rerun()


def toggle_campaign_status(campaign_id):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–º–ø–∞–Ω–∏–∏"""
    response = make_api_request(f"/campaigns/{campaign_id}/toggle", method="POST")
    if response:
        st.success(f"‚úÖ {response['message']}")
        st.info("üîÑ –ö—ç—à –∫–∞–º–ø–∞–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω")


def delete_campaign(campaign_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏"""
    response = make_api_request(f"/campaigns/{campaign_id}", method="DELETE")
    if response is not None:  # 204 —Å—Ç–∞—Ç—É—Å –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON
        st.success("‚úÖ –ö–∞–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞!")
        st.info("üîÑ –ö—ç—à –∫–∞–º–ø–∞–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω")




def show_logs_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    st.header("üìù –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    
    with col1:
        campaigns_data = make_api_request("/campaigns/")
        campaign_options = {"–í—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏": None}
        if campaigns_data:
            for campaign in campaigns_data:
                campaign_options[campaign['name']] = campaign['id']
        
        selected_campaign = st.selectbox(
            "–ö–∞–º–ø–∞–Ω–∏—è",
            options=list(campaign_options.keys())
        )
        campaign_id = campaign_options[selected_campaign]
    
    with col2:
        status_options = {
            "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã": None,
            "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ": "sent",
            "–û—à–∏–±–∫–∏": "failed",
            "–í –æ—á–µ—Ä–µ–¥–∏": "pending"
        }
        selected_status = st.selectbox("–°—Ç–∞—Ç—É—Å", options=list(status_options.keys()))
        status_filter = status_options[selected_status]
    
    with col3:
        hours_back = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥",
            options=[None, 1, 6, 24, 72, 168],
            format_func=lambda x: "–í—Å–µ –≤—Ä–µ–º—è" if x is None else f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {x}—á"
        )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤
    params = {}
    if campaign_id:
        params['campaign_id'] = campaign_id
    if status_filter:
        params['status_filter'] = status_filter
    if hours_back:
        params['hours_back'] = hours_back
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    query_string = "&".join([f"{k}={v}" for k, v in params.items()])
    endpoint = f"/logs/{'?' + query_string if query_string else ''}"
    
    logs_data = make_api_request(endpoint)
    
    if logs_data:
        st.subheader(f"üìÑ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(logs_data)}")
        
        for log in logs_data:
            timestamp = datetime.fromisoformat(log['timestamp'].replace('Z', '+00:00'))
            local_time = timestamp.strftime('%d.%m.%Y %H:%M:%S')
            
            # –¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
            status_colors = {
                'sent': 'üü¢',
                'failed': 'üî¥',
                'pending': 'üü°'
            }
            status_color = status_colors.get(log['status'], '‚ö™')
            
            with st.expander(f"{status_color} {local_time} - {log['chat_title']} - {log['trigger_keyword']}"):
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.write(f"**–ß–∞—Ç:** {log['chat_title']} ({log['chat_id']})")
                    st.write(f"**–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:** {log['trigger_keyword']}")
                    st.write(f"**–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**")
                    st.text(log['original_message'])
                    
                    st.write(f"**–û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞:**")
                    st.text(log['agent_response'])
                    
                    if log['error_message']:
                        st.error(f"**–û—à–∏–±–∫–∞:** {log['error_message']}")
                
                with col2:
                    st.write(f"**ID —Å–æ–æ–±—â–µ–Ω–∏—è:** {log['message_id']}")
                    st.write(f"**–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {log['processing_time_ms']}–º—Å" if log['processing_time_ms'] else "N/A")
                    
                    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if log['context_messages']:
                        with st.expander("–ö–æ–Ω—Ç–µ–∫—Å—Ç"):
                            for ctx_msg in log['context_messages']:
                                st.text(f"[{ctx_msg['date']}] {ctx_msg['text']}")
    else:
        st.info("üì≠ –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


def show_settings_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    server_status = check_server_status()
    
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    tab1, tab2, tab3, tab4 = st.tabs(["üîß –°—Ç–∞—Ç—É—Å", "üåê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "üîë API Keys", "üìä –≠–∫—Å–ø–æ—Ä—Ç"])
    
    with tab1:
        st.subheader("–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        if server_status:
            # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                api_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if server_status.get("status") == "healthy" else "üî¥ –û—à–∏–±–∫–∞"
                st.metric("API –°–µ—Ä–≤–µ—Ä", api_status)
            
            with col2:
                db_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if server_status.get("database") == "connected" else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞"
                st.metric("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", db_status)
            
            with col3:
                telegram_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if server_status.get("telegram_connected") else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
                st.metric("Telegram", telegram_status)
            
            with col4:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                ai_status = "üü¢ –î–æ—Å—Ç—É–ø–µ–Ω" if server_status.get("status") == "healthy" else "üü° –ß–∞—Å—Ç–∏—á–Ω–æ"
                st.metric("AI –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã", ai_status)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            
            info_data = {
                "–ü–∞—Ä–∞–º–µ—Ç—Ä": [
                    "URL Backend API",
                    "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã",
                    "–í–µ—Ä—Å–∏—è API",
                    "–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"
                ],
                "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                    API_BASE_URL,
                    "–û–±–ª–∞—á–Ω—ã–π" if "127.0.0.1" not in API_BASE_URL else "–õ–æ–∫–∞–ª—å–Ω—ã–π",
                    "1.0.0",
                    datetime.now().strftime('%d.%m.%Y %H:%M:%S')
                ]
            }
            
            df_info = pd.DataFrame(info_data)
            st.table(df_info)
            
        else:
            st.error("‚ùå Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            st.write(f"**–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫:** `{API_BASE_URL}`")
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º
            st.subheader("–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
            st.markdown("""
            1. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL backend —Å–µ—Ä–≤–µ—Ä–∞** –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Streamlit Cloud
            2. **–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω** –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            3. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS** –Ω–∞ backend —Å–µ—Ä–≤–µ—Ä–µ
            4. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏** backend —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
            """)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", type="primary"):
            st.rerun()
    
    with tab2:
        st.subheader("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
        with st.expander("üåê Backend API", expanded=True):
            st.code(f"""
# –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "{API_BASE_URL}"

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {API_BASE_URL}/docs
- ReDoc: {API_BASE_URL}/redoc
- Health Check: {API_BASE_URL}/health
- –ö–∞–º–ø–∞–Ω–∏–∏: {API_BASE_URL}/campaigns/
- –õ–æ–≥–∏: {API_BASE_URL}/logs/
- –ß–∞—Ç—ã: {API_BASE_URL}/chats/active
            """, language="yaml")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Streamlit Cloud
        with st.expander("‚òÅÔ∏è Streamlit Cloud"):
            st.markdown("""
            **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ Streamlit Cloud:**
            
            1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ **Settings ‚Üí Secrets**
            2. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É:
            ```toml
            BACKEND_API_URL = "https://your-backend-server.herokuapp.com"
            ```
            3. –ó–∞–º–µ–Ω–∏—Ç–µ URL –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ backend —Å–µ—Ä–≤–µ—Ä–∞
            4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            """)
        
        # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
        with st.expander("üè† –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"):
            st.markdown("""
            **–î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:**
            
            1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª `.streamlit/secrets.toml`
            2. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
            ```toml
            BACKEND_API_URL = "http://127.0.0.1:8000"
            ```
            3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend —Å–µ—Ä–≤–µ—Ä: `python backend/main.py`
            4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Streamlit: `streamlit run streamlit_app.py`
            """)
    
    with tab3:
        st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        st.markdown("**–°—Ç–∞—Ç—É—Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:**")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        campaigns_data = make_api_request("/campaigns/") if server_status else None
        
        if campaigns_data:
            openai_campaigns = len([c for c in campaigns_data if c.get('ai_provider') == 'openai'])
            claude_campaigns = len([c for c in campaigns_data if c.get('ai_provider') == 'claude'])
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric(
                    "ü§ñ OpenAI", 
                    f"{openai_campaigns} –∫–∞–º–ø–∞–Ω–∏–π",
                    delta="–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä" if openai_campaigns > 0 else None
                )
            
            with col2:
                st.metric(
                    "üß† Claude", 
                    f"{claude_campaigns} –∫–∞–º–ø–∞–Ω–∏–π",
                    delta="–î–æ—Å—Ç—É–ø–µ–Ω" if claude_campaigns > 0 else None
                )
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
        with st.expander("üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI API"):
            st.markdown("""
            1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ [platform.openai.com](https://platform.openai.com/api-keys)
            2. –í Streamlit Cloud –¥–æ–±–∞–≤—å—Ç–µ –≤ Secrets:
            ```toml
            OPENAI_API_KEY = "sk-proj-your-key-here"
            ```
            3. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: gpt-4, gpt-3.5-turbo, gpt-4-turbo-preview
            """)
        
        with st.expander("üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Claude API"):
            st.markdown("""
            1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ [console.anthropic.com](https://console.anthropic.com)
            2. –í Streamlit Cloud –¥–æ–±–∞–≤—å—Ç–µ –≤ Secrets:
            ```toml
            ANTHROPIC_API_KEY = "sk-ant-api03-your-key-here"
            ```
            3. –£–∫–∞–∂–∏—Ç–µ Claude Agent ID –≤ –∫–∞–º–ø–∞–Ω–∏—è—Ö
            """)
        
        with st.expander("üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram API"):
            st.markdown("""
            1. –ü–æ–ª—É—á–∏—Ç–µ API ID –∏ Hash –Ω–∞ [my.telegram.org/apps](https://my.telegram.org/apps)
            2. –í Streamlit Cloud –¥–æ–±–∞–≤—å—Ç–µ –≤ Secrets:
            ```toml
            TELEGRAM_API_ID = "12345678"
            TELEGRAM_API_HASH = "your-api-hash-here"
            TELEGRAM_PHONE = "+1234567890"
            ```
            **–í–Ω–∏–º–∞–Ω–∏–µ:** –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è backend —Å–µ—Ä–≤–µ—Ä–∞
            """)
    
    with tab4:
        st.subheader("–≠–∫—Å–ø–æ—Ä—Ç –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–º–ø–∞–Ω–∏–π
        if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–º–ø–∞–Ω–∏–π", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏ –≤ JSON —Ñ–∞–π–ª"):
            if server_status:
                campaigns_data = make_api_request("/campaigns/")
                if campaigns_data:
                    # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    export_data = {
                        "export_date": datetime.now().isoformat(),
                        "total_campaigns": len(campaigns_data),
                        "campaigns": campaigns_data
                    }
                    
                    json_str = json.dumps(export_data, ensure_ascii=False, indent=2)
                    
                    st.download_button(
                        label="üíæ –°–∫–∞—á–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏ (JSON)",
                        data=json_str,
                        file_name=f"telegram_agent_campaigns_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
                        mime="application/json"
                    )
                    
                    st.success(f"‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é: {len(campaigns_data)} –∫–∞–º–ø–∞–Ω–∏–π")
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–π")
            else:
                st.warning("‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤
        if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"):
            if server_status:
                logs_data = make_api_request("/logs/?hours_back=168")  # 7 –¥–Ω–µ–π
                if logs_data:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è CSV
                    logs_for_export = []
                    for log in logs_data:
                        logs_for_export.append({
                            "–î–∞—Ç–∞": log['timestamp'],
                            "–ß–∞—Ç": log['chat_title'],
                            "ID —á–∞—Ç–∞": log['chat_id'],
                            "–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ": log['trigger_keyword'],
                            "–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ": log['original_message'],
                            "–û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞": log['agent_response'],
                            "–°—Ç–∞—Ç—É—Å": log['status'],
                            "–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º—Å)": log.get('processing_time_ms', 0)
                        })
                    
                    df_export = pd.DataFrame(logs_for_export)
                    csv_data = df_export.to_csv(index=False, encoding='utf-8-sig')
                    
                    st.download_button(
                        label="üíæ –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏ (CSV)",
                        data=csv_data,
                        file_name=f"telegram_agent_logs_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                        mime="text/csv"
                    )
                    
                    st.success(f"‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é: {len(logs_data)} –∑–∞–ø–∏—Å–µ–π")
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏")
            else:
                st.warning("‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
        st.subheader("üìã –û —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏")
        st.info("""
        **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
        - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–∞–º–ø–∞–Ω–∏–∏ –ø–µ—Ä–µ–¥ –≤–∞–∂–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        - –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ª–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        - –•—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ
        - –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞
        """)


def show_demo_campaigns_page():
    """–î–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–º–ø–∞–Ω–∏–π"""
    st.header("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏—è–º–∏ (–î–µ–º–æ-—Ä–µ–∂–∏–º)")
    st.warning("‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–∫–∞–∑–∞–Ω –¥–µ–º–æ-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    
    st.info("–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–º–ø–∞–Ω–∏—è–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram-—á–∞—Ç–æ–≤")
    
    # –ü—Ä–∏–º–µ—Ä –∫–∞–º–ø–∞–Ω–∏–∏
    with st.expander("üéØ –ü—Ä–∏–º–µ—Ä –∫–∞–º–ø–∞–Ω–∏–∏ - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π", expanded=True):
        st.write("**ID:** demo-001")
        st.write("**–ê–∫–∫–∞—É–Ω—Ç Telegram:** @demo_bot")
        st.write("**Claude –∞–≥–µ–Ω—Ç:** claude-news-agent")
        st.write("**–ß–∞—Ç—ã:** @news_channel, @tech_chat")
        st.write("**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** –Ω–æ–≤–æ—Å—Ç–∏, –∞–Ω–æ–Ω—Å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        st.write("**–°—Ç–∞—Ç—É—Å:** üü¢ –ê–∫—Ç–∏–≤–Ω–∞")




def show_demo_logs_page():
    """–î–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–æ–≤"""
    st.header("üìù –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–î–µ–º–æ-—Ä–µ–∂–∏–º)")
    st.warning("‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–∫–∞–∑–∞–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ")
    
    st.info("–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ª–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    with st.expander("üü¢ 01.08.2025 14:30 - –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª - –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: –∞–Ω–æ–Ω—Å"):
        st.write("**–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** –ê–Ω–æ–Ω—Å –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        st.write("**–û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞:** –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ")


def show_chats_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–∞—Ç–æ–≤"""
    st.header("üí¨ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–æ–≤")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
    chats_data = make_api_request("/chats/active")
    
    if chats_data is None:
        return
    
    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    col1, col2 = st.columns([1, 4])
    with col1:
        auto_refresh = st.checkbox("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=False)
    with col2:
        if st.button("üì• –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å"):
            st.rerun()
    
    if auto_refresh:
        time.sleep(5)
        st.rerun()
    
    if chats_data and len(chats_data) > 0:
        st.subheader(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã ({len(chats_data)})")
        
        # –í—ã–±–æ—Ä —á–∞—Ç–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        selected_chat = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
            options=[None] + [chat["chat_id"] for chat in chats_data],
            format_func=lambda x: "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç..." if x is None else next(
                (chat["chat_title"] for chat in chats_data if chat["chat_id"] == x), x
            )
        )
        
        # –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫
        for chat in chats_data:
            with st.expander(f"üí¨ {chat['chat_title']}", expanded=(chat['chat_id'] == selected_chat)):
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.write(f"**ID —á–∞—Ç–∞:** `{chat['chat_id']}`")
                    st.write(f"**–ö–∞–º–ø–∞–Ω–∏–π:** {chat['campaign_count']}")
                    
                    if chat['last_activity']:
                        last_activity = datetime.fromisoformat(chat['last_activity'].replace('Z', '+00:00'))
                        st.write(f"**–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {last_activity.strftime('%d.%m.%Y %H:%M')}")
                    
                    if chat['last_message']:
                        st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** {chat['last_message']}")
                    
                    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    connection_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if chat['is_connected'] else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
                    st.write(f"**–°—Ç–∞—Ç—É—Å:** {connection_status}")
                
                with col2:
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                    if st.button(f"üìú –°–æ–æ–±—â–µ–Ω–∏—è", key=f"messages_{chat['chat_id']}"):
                        st.session_state.selected_chat_for_messages = chat['chat_id']
                        st.session_state.show_chat_messages = True
                        st.rerun()
                    
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if st.button(f"‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å", key=f"send_{chat['chat_id']}"):
                        st.session_state.selected_chat_for_send = chat['chat_id']
                        st.session_state.show_send_message = True
                        st.rerun()
                    
                    # –ö–Ω–æ–ø–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
                    if st.button(f"‚ÑπÔ∏è –ò–Ω—Ñ–æ", key=f"info_{chat['chat_id']}"):
                        show_chat_info(chat['chat_id'])
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
        if st.session_state.get('show_chat_messages', False):
            show_chat_messages()
        
        # –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if st.session_state.get('show_send_message', False):
            show_send_message_form()
            
    else:
        st.info("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")


def show_chat_messages():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
    chat_id = st.session_state.get('selected_chat_for_messages')
    if not chat_id:
        return
    
    st.subheader(f"üìú –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞: {chat_id}")
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", key="close_messages"):
        st.session_state.show_chat_messages = False
        st.rerun()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    messages_data = make_api_request(f"/chats/{chat_id}/messages?limit=30")
    
    if messages_data:
        st.write(f"**–ß–∞—Ç:** {messages_data['chat_title']}")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        for message in messages_data['messages']:
            message_time = datetime.fromisoformat(message['date'].replace('Z', '+00:00'))
            time_str = message_time.strftime('%H:%M:%S')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            if message['is_bot']:
                message_type = "ü§ñ"
            elif message['sender'].startswith('@'):
                message_type = "üë§"
            else:
                message_type = "üë•"
            
            with st.container():
                col1, col2 = st.columns([4, 1])
                
                with col1:
                    st.markdown(f"**{message_type} {message['sender']}** ({time_str})")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–ª–∞–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if message.get('reply_info'):
                        reply_info = message['reply_info']
                        st.info(f"‚Ü©Ô∏è **–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {reply_info['original_sender']}:**\n\"{reply_info['original_text']}\"")
                    
                    if message['text']:
                        st.write(message['text'])
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if message.get('bot_response'):
                        bot_resp = message['bot_response']
                        status_color = "üü¢" if bot_resp['status'] == 'sent' else "üî¥"
                        st.info(f"{status_color} **–û—Ç–≤–µ—Ç –±–æ—Ç–∞** (–∫–ª.—Å–ª–æ–≤–æ: {bot_resp['trigger_keyword']}):\n{bot_resp['response']}")
                
                with col2:
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    if not message['is_bot'] and not message.get('bot_response'):
                        if st.button("ü§ñ –û—Ç–≤–µ—Ç–∏—Ç—å", key=f"reply_{message['id']}"):
                            trigger_manual_response(chat_id, message['id'])
                
                st.divider()


def show_send_message_form():
    """–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    chat_id = st.session_state.get('selected_chat_for_send')
    if not chat_id:
        return
    
    st.subheader(f"‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: {chat_id}")
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", key="close_send"):
        st.session_state.show_send_message = False
        st.rerun()
    
    with st.form("send_message_form"):
        message_text = st.text_area(
            "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
            height=100,
            help="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"
        )
        
        reply_to = st.number_input(
            "ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
            min_value=0,
            value=0,
            help="–ï—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –Ω–µ–≥–æ"
        )
        
        submit = st.form_submit_button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", type="primary")
        
        if submit:
            if not message_text.strip():
                st.error("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            message_data = {
                "text": message_text.strip(),
                "reply_to": reply_to if reply_to > 0 else None
            }
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞
            response = make_api_request(
                f"/chats/{chat_id}/send",
                method="POST",
                data=message_data
            )
            
            if response:
                st.success(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ID: {response['message_id']}")
                st.session_state.show_send_message = False
                time.sleep(1)
                st.rerun()


def show_chat_info(chat_id):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ"""
    info = make_api_request(f"/chats/{chat_id}/info")
    
    if info:
        st.subheader(f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ")
        
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"**ID:** `{info['id']}`")
            st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {info['title']}")
            st.write(f"**–¢–∏–ø:** {info['type']}")
        
        with col2:
            if info['username']:
                st.write(f"**Username:** {info['username']}")
            if info['participant_count']:
                st.write(f"**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {info['participant_count']}")
        
        if info['description']:
            st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {info['description']}")


def trigger_manual_response(chat_id, message_id):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
    campaigns_data = make_api_request("/campaigns/")
    
    if campaigns_data:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—è—Ç –¥–∞–Ω–Ω—ã–π —á–∞—Ç
        relevant_campaigns = []
        for campaign in campaigns_data:
            if campaign['active'] and chat_id in campaign['telegram_chats']:
                relevant_campaigns.append(campaign)
        
        if relevant_campaigns:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞–º–ø–∞–Ω–∏—é
            campaign = relevant_campaigns[0]
            
            trigger_data = {
                "message_id": message_id,
                "campaign_id": campaign['id']
            }
            
            response = make_api_request(
                f"/chats/{chat_id}/trigger",
                method="POST",
                data=trigger_data
            )
            
            if response:
                st.success(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ –∫–∞–º–ø–∞–Ω–∏—é '{campaign['name']}'")
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
        else:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞")
    else:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π")


def show_demo_chats_page():
    """–î–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–æ–≤"""
    st.header("üí¨ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–æ–≤ (–î–µ–º–æ-—Ä–µ–∂–∏–º)")
    st.warning("‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–∫–∞–∑–∞–Ω –¥–µ–º–æ-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    
    st.info("–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ Telegram-—á–∞—Ç–∞—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    
    # –ü—Ä–∏–º–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    with st.expander("üí¨ @tech_news_channel", expanded=True):
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.write("**ID —á–∞—Ç–∞:** `-1001234567890`")
            st.write("**–ö–∞–º–ø–∞–Ω–∏–π:** 2")
            st.write("**–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** 02.08.2025 15:45")
            st.write("**–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è Python 3.12 –≤—ã–ø—É—â–µ–Ω–∞...")
            st.write("**–°—Ç–∞—Ç—É—Å:** üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω")
        
        with col2:
            st.button("üìú –°–æ–æ–±—â–µ–Ω–∏—è", key="demo_messages", disabled=True)
            st.button("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å", key="demo_send", disabled=True) 
            st.button("‚ÑπÔ∏è –ò–Ω—Ñ–æ", key="demo_info", disabled=True)
    
    # –î–µ–º–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    st.subheader("üìú –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
    with st.expander("–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ—Å—Ç–æ–≤"):
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
        st.markdown("**üë§ @user1** (14:30)")
        st.info("‚Ü©Ô∏è **–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @admin:**\n\"–ö—Ç–æ –º–æ–∂–µ—Ç –æ–±—ä—è—Å–Ω–∏—Ç—å –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ API?\"")
        st.write("–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ API")
        
        # –û—Ç–≤–µ—Ç –±–æ—Ç–∞
        st.info("üü¢ **–û—Ç–≤–µ—Ç –±–æ—Ç–∞** (–∫–ª.—Å–ª–æ–≤–æ: API):\n–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ù–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ API –≤–∫–ª—é—á–∞—é—Ç...")
        
        st.divider()
        
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        st.markdown("**üë§ @user2** (14:32)")
        st.write("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ!")
        
        st.divider()


def show_company_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
    st.header("üè¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏
    company_data = make_api_request("/company/settings")
    
    # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
    if company_data is None:
        company_data = {
            "name": "",
            "description": "",
            "telegram_accounts": [],
            "ai_providers": {
                "openai": {"enabled": False, "default_model": "gpt-4"},
                "claude": {"enabled": False, "default_agent": ""}
            },
            "default_settings": {
                "context_messages_count": 3,
                "response_delay": 1.0,
                "auto_reply": True
            }
        }
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
    st.subheader("üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    
    with st.form("company_info_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            company_name = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏*",
                value=company_data.get('name', ''),
                help="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
            )
            
            company_website = st.text_input(
                "–í–µ–±-—Å–∞–π—Ç",
                value=company_data.get('website', ''),
                help="–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
            )
        
        with col2:
            company_email = st.text_input(
                "Email –∫–æ–Ω—Ç–∞–∫—Ç",
                value=company_data.get('email', ''),
                help="–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
            )
            
            timezone = st.selectbox(
                "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                options=["UTC", "Europe/Moscow", "America/New_York", "Asia/Tokyo", "Europe/London"],
                index=0 if not company_data.get('timezone') else ["UTC", "Europe/Moscow", "America/New_York", "Asia/Tokyo", "Europe/London"].index(company_data.get('timezone', 'UTC')),
                help="–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∫–æ–º–ø–∞–Ω–∏–∏"
            )
        
        company_description = st.text_area(
            "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
            value=company_data.get('description', ''),
            height=100,
            help="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏"
        )
        
        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", type="primary"):
            info_data = {
                "name": company_name,
                "website": company_website,
                "email": company_email,
                "timezone": timezone,
                "description": company_description
            }
            
            response = make_api_request("/company/settings", method="PUT", data=info_data)
            if response:
                st.success("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                time.sleep(1)
                st.rerun()
    
    st.divider()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    st.subheader("üì± Telegram –∞–∫–∫–∞—É–Ω—Ç—ã")
    
    telegram_accounts = company_data.get('telegram_accounts', [])
    
    if telegram_accounts:
        st.write("**–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:**")
        for i, account in enumerate(telegram_accounts):
            col1, col2, col3 = st.columns([3, 2, 1])
            
            with col1:
                st.write(f"üì± **{account['name']}** ({account['phone']})")
                status_color = "üü¢" if account.get('is_active', False) else "üî¥"
                st.write(f"–°—Ç–∞—Ç—É—Å: {status_color} {'–ê–∫—Ç–∏–≤–µ–Ω' if account.get('is_active', False) else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
            
            with col2:
                st.write(f"–ö–∞–º–ø–∞–Ω–∏–π: {account.get('campaigns_count', 0)}")
                last_used = account.get('last_used')
                if last_used:
                    st.write(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {last_used}")
            
            with col3:
                if st.button("üóëÔ∏è", key=f"delete_account_{i}", help="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"):
                    # –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                    response = make_api_request(f"/company/telegram-accounts/{account['id']}", method="DELETE")
                    if response:
                        st.success("–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω!")
                        st.rerun()
    else:
        st.info("üìù Telegram –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π Telegram –∞–∫–∫–∞—É–Ω—Ç"):
        with st.form("add_telegram_account"):
            st.write("**–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞:**")
            
            account_name = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞*",
                help="–£–¥–æ–±–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"
            )
            
            phone_number = st.text_input(
                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*",
                help="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (+7XXXXXXXXXX)"
            )
            
            api_id = st.text_input(
                "Telegram API ID*",
                help="API ID –ø–æ–ª—É—á–µ–Ω –Ω–∞ my.telegram.org/apps"
            )
            
            api_hash = st.text_input(
                "Telegram API Hash*",
                type="password",
                help="API Hash –ø–æ–ª—É—á–µ–Ω –Ω–∞ my.telegram.org/apps"
            )
            
            if st.form_submit_button("üì± –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", type="primary"):
                if all([account_name, phone_number, api_id, api_hash]):
                    account_data = {
                        "name": account_name,
                        "phone": phone_number,
                        "api_id": api_id,
                        "api_hash": api_hash
                    }
                    
                    response = make_api_request("/company/telegram-accounts", method="POST", data=account_data)
                    if response:
                        st.success("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω! –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ SMS.")
                        time.sleep(1)
                        st.rerun()
                else:
                    st.error("‚ùå –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    st.divider()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    st.subheader("üß† AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã")
    
    tab1, tab2 = st.tabs(["ü§ñ OpenAI", "üß† Claude"])
    
    with tab1:
        openai_settings = company_data.get('ai_providers', {}).get('openai', {})
        
        with st.form("openai_settings"):
            openai_enabled = st.checkbox(
                "–í–∫–ª—é—á–∏—Ç—å OpenAI",
                value=openai_settings.get('enabled', False)
            )
            
            if openai_enabled:
                openai_api_key = st.text_input(
                    "OpenAI API Key*",
                    type="password",
                    help="API –∫–ª—é—á –∏–∑ platform.openai.com"
                )
                
                default_model = st.selectbox(
                    "–ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                    options=["gpt-4", "gpt-3.5-turbo", "gpt-4-turbo-preview"],
                    index=["gpt-4", "gpt-3.5-turbo", "gpt-4-turbo-preview"].index(openai_settings.get('default_model', 'gpt-4'))
                )
                
                max_tokens = st.number_input(
                    "–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤",
                    min_value=100,
                    max_value=4000,
                    value=openai_settings.get('max_tokens', 1500)
                )
                
                temperature = st.slider(
                    "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å)",
                    min_value=0.0,
                    max_value=2.0,
                    value=openai_settings.get('temperature', 0.7),
                    step=0.1
                )
            
            if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI"):
                openai_data = {
                    "enabled": openai_enabled,
                    "default_model": default_model if openai_enabled else "gpt-4",
                    "max_tokens": max_tokens if openai_enabled else 1500,
                    "temperature": temperature if openai_enabled else 0.7
                }
                
                if openai_enabled and 'openai_api_key' in locals():
                    openai_data["api_key"] = openai_api_key
                
                response = make_api_request("/company/ai-providers/openai", method="PUT", data=openai_data)
                if response:
                    st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    with tab2:
        claude_settings = company_data.get('ai_providers', {}).get('claude', {})
        
        with st.form("claude_settings"):
            claude_enabled = st.checkbox(
                "–í–∫–ª—é—á–∏—Ç—å Claude",
                value=claude_settings.get('enabled', False)
            )
            
            if claude_enabled:
                claude_api_key = st.text_input(
                    "Anthropic API Key*",
                    type="password",
                    help="API –∫–ª—é—á –∏–∑ console.anthropic.com"
                )
                
                default_agent = st.text_input(
                    "Agent ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                    value=claude_settings.get('default_agent', ''),
                    help="ID –∏–ª–∏ alias Claude Code –∞–≥–µ–Ω—Ç–∞"
                )
                
                max_tokens = st.number_input(
                    "–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤",
                    min_value=100,
                    max_value=8000,
                    value=claude_settings.get('max_tokens', 2000)
                )
            
            if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Claude"):
                claude_data = {
                    "enabled": claude_enabled,
                    "default_agent": default_agent if claude_enabled else "",
                    "max_tokens": max_tokens if claude_enabled else 2000
                }
                
                if claude_enabled and 'claude_api_key' in locals():
                    claude_data["api_key"] = claude_api_key
                
                response = make_api_request("/company/ai-providers/claude", method="PUT", data=claude_data)
                if response:
                    st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Claude —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    st.divider()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    default_settings = company_data.get('default_settings', {})
    
    with st.form("default_settings"):
        col1, col2 = st.columns(2)
        
        with col1:
            context_messages_count = st.number_input(
                "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
                min_value=1,
                max_value=20,
                value=default_settings.get('context_messages_count', 3),
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            )
            
            response_delay = st.number_input(
                "–ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)",
                min_value=0.0,
                max_value=10.0,
                value=default_settings.get('response_delay', 1.0),
                step=0.1,
                help="–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞"
            )
        
        with col2:
            auto_reply = st.checkbox(
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã",
                value=default_settings.get('auto_reply', True),
                help="–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"
            )
            
            work_hours_enabled = st.checkbox(
                "–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–±–æ—á–∏–º–∏ —á–∞—Å–∞–º–∏",
                value=default_settings.get('work_hours_enabled', False),
                help="–û—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã"
            )
            
            if work_hours_enabled:
                work_start = st.time_input(
                    "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è",
                    value=datetime.strptime(default_settings.get('work_start', '09:00'), '%H:%M').time()
                )
                
                work_end = st.time_input(
                    "–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è",
                    value=datetime.strptime(default_settings.get('work_end', '18:00'), '%H:%M').time()
                )
        
        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"):
            settings_data = {
                "context_messages_count": context_messages_count,
                "response_delay": response_delay,
                "auto_reply": auto_reply,
                "work_hours_enabled": work_hours_enabled
            }
            
            if work_hours_enabled:
                settings_data["work_start"] = work_start.strftime('%H:%M')
                settings_data["work_end"] = work_end.strftime('%H:%M')
            
            response = make_api_request("/company/default-settings", method="PUT", data=settings_data)
            if response:
                st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")


def show_demo_company_page():
    """–î–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
    st.header("üè¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ (–î–µ–º–æ-—Ä–µ–∂–∏–º)")
    st.warning("‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–∫–∞–∑–∞–Ω –¥–µ–º–æ-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    
    st.info("–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏, Telegram –∞–∫–∫–∞—É–Ω—Ç—ã –∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã")
    
    # –î–µ–º–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
    st.subheader("üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏", expanded=True):
        st.write("**–ù–∞–∑–≤–∞–Ω–∏–µ:** TechCorp Solutions")
        st.write("**Email:** contact@techcorp.com")
        st.write("**–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** Europe/Moscow")
        st.write("**–û–ø–∏—Å–∞–Ω–∏–µ:** –ö–æ–º–ø–∞–Ω–∏—è –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ò–ò-—Ä–µ—à–µ–Ω–∏–π")
    
    # –î–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç—ã
    st.subheader("üì± Telegram –∞–∫–∫–∞—É–Ω—Ç—ã")
    with st.expander("–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã"):
        st.write("üì± **–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç** (+79001234567)")
        st.write("–°—Ç–∞—Ç—É—Å: üü¢ –ê–∫—Ç–∏–≤–µ–Ω")
        st.write("–ö–∞–º–ø–∞–Ω–∏–π: 3")
    
    # –î–µ–º–æ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    st.subheader("üß† AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã")
    col1, col2 = st.columns(2)
    with col1:
        st.write("ü§ñ **OpenAI:** üü¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω")
        st.write("–ú–æ–¥–µ–ª—å: gpt-4")
    with col2:
        st.write("üß† **Claude:** üü¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω")
        st.write("Agent: claude-support-agent")


if __name__ == "__main__":
    main()