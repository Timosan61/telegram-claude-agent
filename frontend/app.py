import streamlit as st
import requests
import pandas as pd
import json
from datetime import datetime, timedelta
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Telegram Claude Agent",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ –≤ Streamlit Cloud –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
try:
    import streamlit as st
    # –í Streamlit Cloud –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ secrets –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π URL
    API_BASE_URL = st.secrets.get("BACKEND_API_URL", "http://127.0.0.1:8000")
except:
    # Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ secrets
    API_BASE_URL = "http://127.0.0.1:8000"


def make_api_request(endpoint, method="GET", data=None):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
    try:
        url = f"{API_BASE_URL}{endpoint}"
        
        if method == "GET":
            response = requests.get(url)
        elif method == "POST":
            response = requests.post(url, json=data)
        elif method == "PUT":
            response = requests.put(url, json=data)
        elif method == "DELETE":
            response = requests.delete(url)
        
        if response.status_code in [200, 201]:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return None
    
    except requests.exceptions.ConnectionError:
        if "127.0.0.1" in API_BASE_URL or "localhost" in API_BASE_URL:
            st.error("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:8000")
        else:
            st.error(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ backend —Å–µ—Ä–≤–µ—Ä—É: `{API_BASE_URL}`")
            st.markdown("**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**")
            st.markdown("- Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            st.markdown("- –ù–µ–≤–µ—Ä–Ω—ã–π URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Streamlit Cloud")
            st.markdown("- –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
        return None
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None


def check_server_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            return response.json()
    except:
        return None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.title("ü§ñ Telegram Claude Agent")
    st.markdown("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–∞–≥–µ–Ω—Ç–æ–º –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram-—á–∞—Ç–æ–≤")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
    if "127.0.0.1" not in API_BASE_URL and "localhost" not in API_BASE_URL:
        st.info(f"üåê **–û–±–ª–∞—á–Ω—ã–π —Ä–µ–∂–∏–º**: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ backend —Å–µ—Ä–≤–µ—Ä—É `{API_BASE_URL}`")
        st.markdown("""
        **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ**: –≠—Ç–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏—è–º–∏. 
        –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Telegram-–∞–≥–µ–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–π backend —Å–µ—Ä–≤–µ—Ä.
        """)
    else:
        st.success(f"üè† **–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º**: Backend —Å–µ—Ä–≤–µ—Ä `{API_BASE_URL}`")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    server_status = check_server_status()
    
    if server_status:
        col1, col2, col3 = st.columns(3)
        with col1:
            status_color = "üü¢" if server_status.get("status") == "healthy" else "üî¥"
            st.metric("–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", f"{status_color} {server_status.get('status', 'unknown')}")
        
        with col2:
            telegram_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if server_status.get("telegram_connected") else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
            st.metric("Telegram", telegram_status)
        
        with col3:
            db_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if server_status.get("database") == "connected" else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞"
            st.metric("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", db_status)
    else:
        st.error("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É",
        ["üìã –ö–∞–º–ø–∞–Ω–∏–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìù –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    )
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page == "üìã –ö–∞–º–ø–∞–Ω–∏–∏":
        show_campaigns_page()
    elif page == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_statistics_page()
    elif page == "üìù –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏":
        show_logs_page()
    elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        show_settings_page()


def show_campaigns_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏—è–º–∏"""
    st.header("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏—è–º–∏")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π
    campaigns_data = make_api_request("/api/campaigns/")
    
    if campaigns_data is None:
        return
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
    if st.button("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é", type="primary"):
        st.session_state.show_create_form = True
    
    # –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
    if st.session_state.get('show_create_form', False):
        show_campaign_form()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π
    if campaigns_data:
        st.subheader(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ ({len(campaigns_data)})")
        
        for campaign in campaigns_data:
            with st.expander(f"üéØ {campaign['name']}", expanded=False):
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.write(f"**ID:** {campaign['id']}")
                    st.write(f"**–ê–∫–∫–∞—É–Ω—Ç Telegram:** {campaign['telegram_account']}")
                    st.write(f"**Claude –∞–≥–µ–Ω—Ç:** {campaign['claude_agent_id']}")
                    st.write(f"**–ß–∞—Ç—ã:** {', '.join(campaign['telegram_chats'])}")
                    st.write(f"**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** {', '.join(campaign['keywords'])}")
                    st.write(f"**–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π:** {campaign['context_messages_count']}")
                    
                    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
                    with st.expander("–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"):
                        st.text_area(
                            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:",
                            value=campaign['system_instruction'],
                            height=100,
                            disabled=True,
                            key=f"instruction_{campaign['id']}"
                        )
                
                with col2:
                    # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    status_color = "üü¢" if campaign['active'] else "üî¥"
                    status_text = "–ê–∫—Ç–∏–≤–Ω–∞" if campaign['active'] else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
                    st.write(f"**–°—Ç–∞—Ç—É—Å:** {status_color} {status_text}")
                    
                    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    if st.button(
                        "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        key=f"toggle_{campaign['id']}"
                    ):
                        toggle_campaign_status(campaign['id'])
                        st.rerun()
                    
                    if st.button(
                        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                        key=f"edit_{campaign['id']}"
                    ):
                        st.session_state.edit_campaign_id = campaign['id']
                        st.session_state.show_edit_form = True
                        st.rerun()
                    
                    if st.button(
                        "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                        key=f"delete_{campaign['id']}",
                        type="secondary"
                    ):
                        if st.session_state.get(f'confirm_delete_{campaign["id"]}', False):
                            delete_campaign(campaign['id'])
                            st.rerun()
                        else:
                            st.session_state[f'confirm_delete_{campaign["id"]}'] = True
                            st.warning("–ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
    else:
        st.info("üìù –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
    
    # –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if st.session_state.get('show_edit_form', False):
        edit_campaign_id = st.session_state.get('edit_campaign_id')
        if edit_campaign_id:
            campaign_data = next(
                (c for c in campaigns_data if c['id'] == edit_campaign_id), 
                None
            )
            if campaign_data:
                show_campaign_form(edit_data=campaign_data)


def show_campaign_form(edit_data=None):
    """–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏"""
    is_edit = edit_data is not None
    form_title = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏" if is_edit else "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏"
    
    st.subheader(form_title)
    
    with st.form(key="campaign_form"):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        name = st.text_input(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏*",
            value=edit_data.get('name', '') if is_edit else '',
            help="–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏"
        )
        
        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.subheader("üîµ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram")
        
        telegram_account = st.text_input(
            "–ê–∫–∫–∞—É–Ω—Ç Telegram*",
            value=edit_data.get('telegram_account', '') if is_edit else '',
            help="–ò–º—è –∏–ª–∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –æ—Ç–≤–µ—Ç—ã"
        )
        
        telegram_chats_text = st.text_area(
            "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —á–∞—Ç—ã*",
            value='\\n'.join(edit_data.get('telegram_chats', [])) if is_edit else '',
            help="–ü–æ –æ–¥–Ω–æ–º—É ID –∏–ª–∏ username —á–∞—Ç–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: @mychat –∏–ª–∏ -1001234567890)"
        )
        
        keywords_text = st.text_area(
            "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞*",
            value='\\n'.join(edit_data.get('keywords', [])) if is_edit else '',
            help="–ü–æ –æ–¥–Ω–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –Ω–∞ —Å—Ç—Ä–æ–∫—É"
        )
        
        # Claude –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.subheader("üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Claude")
        
        claude_agent_id = st.text_input(
            "ID Claude –∞–≥–µ–Ω—Ç–∞*",
            value=edit_data.get('claude_agent_id', '') if is_edit else '',
            help="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–ª–∏ alias Claude Code –∞–≥–µ–Ω—Ç–∞"
        )
        
        context_messages_count = st.number_input(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
            min_value=1,
            max_value=20,
            value=edit_data.get('context_messages_count', 3) if is_edit else 3,
            help="–°–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        )
        
        system_instruction = st.text_area(
            "–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è*",
            value=edit_data.get('system_instruction', '') if is_edit else '',
            height=150,
            help="–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω —Å–µ–±—è –≤–µ—Å—Ç–∏ –∞–≥–µ–Ω—Ç"
        )
        
        # –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤
        st.subheader("üí¨ –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤")
        example_replies_text = st.text_area(
            "–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ (JSON)",
            value=json.dumps(edit_data.get('example_replies', {}), ensure_ascii=False, indent=2) if is_edit and edit_data.get('example_replies') else '{}',
            height=100,
            help="JSON –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"
        )
        
        # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        active = st.checkbox(
            "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é —Å—Ä–∞–∑—É",
            value=edit_data.get('active', False) if is_edit else False
        )
        
        # –ö–Ω–æ–ø–∫–∏
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col1:
            submit_button = st.form_submit_button(
                "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å" if is_edit else "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é",
                type="primary"
            )
        
        with col2:
            if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
                st.session_state.show_create_form = False
                st.session_state.show_edit_form = False
                if 'edit_campaign_id' in st.session_state:
                    del st.session_state.edit_campaign_id
                st.rerun()
        
        if submit_button:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
            if not all([name, telegram_account, telegram_chats_text, keywords_text, claude_agent_id, system_instruction]):
                st.error("‚ùå –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
                return
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            telegram_chats = [chat.strip() for chat in telegram_chats_text.split('\\n') if chat.strip()]
            keywords = [keyword.strip() for keyword in keywords_text.split('\\n') if keyword.strip()]
            
            try:
                example_replies = json.loads(example_replies_text) if example_replies_text.strip() else {}
            except json.JSONDecodeError:
                st.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö –æ—Ç–≤–µ—Ç–æ–≤")
                return
            
            campaign_data = {
                "name": name,
                "telegram_chats": telegram_chats,
                "keywords": keywords,
                "telegram_account": telegram_account,
                "claude_agent_id": claude_agent_id,
                "context_messages_count": context_messages_count,
                "system_instruction": system_instruction,
                "example_replies": example_replies,
                "active": active
            }
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if is_edit:
                response = make_api_request(
                    f"/api/campaigns/{edit_data['id']}",
                    method="PUT",
                    data=campaign_data
                )
            else:
                response = make_api_request(
                    "/api/campaigns/",
                    method="POST",
                    data=campaign_data
                )
            
            if response:
                success_message = "‚úÖ –ö–∞–º–ø–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!" if is_edit else "‚úÖ –ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞!"
                st.success(success_message)
                
                # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
                st.session_state.show_create_form = False
                st.session_state.show_edit_form = False
                if 'edit_campaign_id' in st.session_state:
                    del st.session_state.edit_campaign_id
                
                time.sleep(1)
                st.rerun()


def toggle_campaign_status(campaign_id):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–º–ø–∞–Ω–∏–∏"""
    response = make_api_request(f"/api/campaigns/{campaign_id}/toggle", method="POST")
    if response:
        st.success(f"‚úÖ {response['message']}")


def delete_campaign(campaign_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏"""
    response = make_api_request(f"/api/campaigns/{campaign_id}", method="DELETE")
    if response is not None:  # 204 —Å—Ç–∞—Ç—É—Å –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON
        st.success("‚úÖ –ö–∞–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞!")


def show_statistics_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    overview_data = make_api_request("/api/logs/stats/overview")
    
    if overview_data:
        # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞–º–ø–∞–Ω–∏–π
        st.subheader("üéØ –ö–∞–º–ø–∞–Ω–∏–∏")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "–í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π",
                overview_data['campaigns']['total']
            )
        
        with col2:
            st.metric(
                "–ê–∫—Ç–∏–≤–Ω—ã—Ö",
                overview_data['campaigns']['active'],
                delta=overview_data['campaigns']['active'] - overview_data['campaigns']['inactive']
            )
        
        with col3:
            st.metric(
                "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö",
                overview_data['campaigns']['inactive']
            )
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        st.subheader("üí¨ –û—Ç–≤–µ—Ç—ã –∞–≥–µ–Ω—Ç–∞")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤",
                overview_data['responses']['total']
            )
        
        with col2:
            st.metric(
                "–ó–∞ 24 —á–∞—Å–∞",
                overview_data['responses']['last_24h']
            )
        
        with col3:
            st.metric(
                "–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞ 24—á",
                overview_data['responses']['status_24h'].get('sent', 0)
            )
        
        with col4:
            st.metric(
                "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å %",
                f"{overview_data['success_rate_24h']}%"
            )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        if overview_data['responses']['status_24h']:
            st.subheader("üìà –°—Ç–∞—Ç—É—Å—ã –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞ 24 —á–∞—Å–∞")
            
            status_data = overview_data['responses']['status_24h']
            
            # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            df_status = pd.DataFrame(list(status_data.items()), columns=['–°—Ç–∞—Ç—É—Å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
            
            if not df_status.empty:
                # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–æ–≤
                status_translation = {
                    'sent': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                    'failed': '–û—à–∏–±–∫–∏',
                    'pending': '–í –æ—á–µ—Ä–µ–¥–∏'
                }
                df_status['–°—Ç–∞—Ç—É—Å'] = df_status['–°—Ç–∞—Ç—É—Å'].map(status_translation)
                
                # –ì—Ä–∞—Ñ–∏–∫
                st.bar_chart(df_status.set_index('–°—Ç–∞—Ç—É—Å'))
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
    campaigns_data = make_api_request("/api/campaigns/")
    if campaigns_data:
        st.subheader("üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º")
        
        campaign_stats = []
        for campaign in campaigns_data:
            stats = make_api_request(f"/api/logs/campaign/{campaign['id']}/stats")
            if stats:
                campaign_stats.append(stats)
        
        if campaign_stats:
            df_campaigns = pd.DataFrame(campaign_stats)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            st.dataframe(
                df_campaigns[['campaign_name', 'total_responses', 'responses_24h', 'success_rate', 'avg_processing_time_ms']],
                column_config={
                    'campaign_name': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏',
                    'total_responses': '–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤',
                    'responses_24h': '–ó–∞ 24—á',
                    'success_rate': '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å %',
                    'avg_processing_time_ms': '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º—Å)'
                },
                use_container_width=True
            )


def show_logs_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    st.header("üìù –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    
    with col1:
        campaigns_data = make_api_request("/api/campaigns/")
        campaign_options = {"–í—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏": None}
        if campaigns_data:
            for campaign in campaigns_data:
                campaign_options[campaign['name']] = campaign['id']
        
        selected_campaign = st.selectbox(
            "–ö–∞–º–ø–∞–Ω–∏—è",
            options=list(campaign_options.keys())
        )
        campaign_id = campaign_options[selected_campaign]
    
    with col2:
        status_options = {
            "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã": None,
            "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ": "sent",
            "–û—à–∏–±–∫–∏": "failed",
            "–í –æ—á–µ—Ä–µ–¥–∏": "pending"
        }
        selected_status = st.selectbox("–°—Ç–∞—Ç—É—Å", options=list(status_options.keys()))
        status_filter = status_options[selected_status]
    
    with col3:
        hours_back = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥",
            options=[None, 1, 6, 24, 72, 168],
            format_func=lambda x: "–í—Å–µ –≤—Ä–µ–º—è" if x is None else f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {x}—á"
        )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤
    params = {}
    if campaign_id:
        params['campaign_id'] = campaign_id
    if status_filter:
        params['status_filter'] = status_filter
    if hours_back:
        params['hours_back'] = hours_back
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    query_string = "&".join([f"{k}={v}" for k, v in params.items()])
    endpoint = f"/api/logs/{'?' + query_string if query_string else ''}"
    
    logs_data = make_api_request(endpoint)
    
    if logs_data:
        st.subheader(f"üìÑ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(logs_data)}")
        
        for log in logs_data:
            timestamp = datetime.fromisoformat(log['timestamp'].replace('Z', '+00:00'))
            local_time = timestamp.strftime('%d.%m.%Y %H:%M:%S')
            
            # –¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
            status_colors = {
                'sent': 'üü¢',
                'failed': 'üî¥',
                'pending': 'üü°'
            }
            status_color = status_colors.get(log['status'], '‚ö™')
            
            with st.expander(f"{status_color} {local_time} - {log['chat_title']} - {log['trigger_keyword']}"):
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.write(f"**–ß–∞—Ç:** {log['chat_title']} ({log['chat_id']})")
                    st.write(f"**–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:** {log['trigger_keyword']}")
                    st.write(f"**–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**")
                    st.text(log['original_message'])
                    
                    st.write(f"**–û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞:**")
                    st.text(log['agent_response'])
                    
                    if log['error_message']:
                        st.error(f"**–û—à–∏–±–∫–∞:** {log['error_message']}")
                
                with col2:
                    st.write(f"**ID —Å–æ–æ–±—â–µ–Ω–∏—è:** {log['message_id']}")
                    st.write(f"**–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {log['processing_time_ms']}–º—Å" if log['processing_time_ms'] else "N/A")
                    
                    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if log['context_messages']:
                        with st.expander("–ö–æ–Ω—Ç–µ–∫—Å—Ç"):
                            for ctx_msg in log['context_messages']:
                                st.text(f"[{ctx_msg['date']}] {ctx_msg['text']}")
    else:
        st.info("üì≠ –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


def show_settings_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    server_status = check_server_status()
    if server_status:
        st.subheader("üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        
        status_data = {
            "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç": ["API –°–µ—Ä–≤–µ—Ä", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "Telegram", "Claude"],
            "–°—Ç–∞—Ç—É—Å": [
                "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç",
                "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if server_status.get("database") == "connected" else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞",
                "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if server_status.get("telegram_connected") else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω",
                "üü¢ –î–æ—Å—Ç—É–ø–µ–Ω"  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ Claude –¥–æ—Å—Ç—É–ø–µ–Ω –µ—Å–ª–∏ API —Ä–∞–±–æ—Ç–∞–µ—Ç
            ]
        }
        
        df_status = pd.DataFrame(status_data)
        st.table(df_status)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    st.subheader("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    
    with st.expander("API –ù–∞—Å—Ç—Ä–æ–π–∫–∏"):
        st.code(f"""
        API_BASE_URL = "{API_BASE_URL}"
        –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: {API_BASE_URL}/docs
        Redoc: {API_BASE_URL}/redoc
        """, language="python")
    
    with st.expander("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"):
        st.info("""
        –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ:
        - ANTHROPIC_API_KEY
        - TELEGRAM_API_ID
        - TELEGRAM_API_HASH
        - TELEGRAM_PHONE
        - ZEP_API_KEY (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """)
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å–∏—Å—Ç–µ–º—ã
    st.subheader("üîÑ –î–µ–π—Å—Ç–≤–∏—è")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"):
            st.rerun()
    
    with col2:
        if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"):
            st.info("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")


if __name__ == "__main__":
    main()