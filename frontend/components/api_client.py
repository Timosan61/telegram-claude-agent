import streamlit as st
import requests
from typing import Optional, Dict, Any
import time


class APIClient:
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å backend API"""
    
    def __init__(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ –≤ Streamlit Cloud –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
        try:
            import streamlit as st
            self.base_url = st.secrets.get("BACKEND_API_URL", "http://127.0.0.1:8000")
        except:
            self.base_url = "http://127.0.0.1:8000"
    
    def make_request(self, endpoint: str, method: str = "GET", data: Optional[Dict[Any, Any]] = None, 
                    timeout: int = 30) -> Optional[Dict[Any, Any]]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
        try:
            url = f"{self.base_url}{endpoint}"
            
            if method == "GET":
                response = requests.get(url, timeout=timeout)
            elif method == "POST":
                response = requests.post(url, json=data, timeout=timeout)
            elif method == "PUT":
                response = requests.put(url, json=data, timeout=timeout)
            elif method == "DELETE":
                response = requests.delete(url, timeout=timeout)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: {method}")
            
            if response.status_code in [200, 201]:
                return response.json() if response.content else {}
            elif response.status_code == 204:
                return {}  # –î–ª—è DELETE –∑–∞–ø—Ä–æ—Å–æ–≤
            else:
                # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                error_text = response.text[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                
                if response.status_code == 404:
                    st.error(f"‚ùå Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω: {endpoint}")
                elif response.status_code == 500:
                    st.error(f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
                elif response.status_code == 504:
                    st.error(f"‚ùå Gateway Timeout (504)")
                    st.info("üí° –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    st.write("‚Ä¢ DigitalOcean App Platform –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
                    st.write("‚Ä¢ Telegram API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
                    st.write("‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram")
                    st.write("‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")
                    st.info("üîÑ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
                else:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                    
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ JSON –æ—à–∏–±–∫–∞
                try:
                    error_json = response.json()
                    if "detail" in error_json:
                        st.error(f"–î–µ—Ç–∞–ª–∏: {error_json['detail']}")
                except:
                    # –ù–µ JSON –æ—Ç–≤–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º HTML –∏–ª–∏ —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ 504
                    if response.status_code != 504 and len(error_text) < 200:
                        st.text(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {error_text}")
                
                return None
        
        except requests.exceptions.ConnectionError:
            if "127.0.0.1" in self.base_url or "localhost" in self.base_url:
                st.error("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:8000")
            else:
                st.error(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ backend —Å–µ—Ä–≤–µ—Ä—É: `{self.base_url}`")
            return None
        except requests.exceptions.Timeout:
            st.error(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ ({timeout}s)")
            return None
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def check_server_status(self) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = requests.get(f"{self.base_url}/health", timeout=3)
            if response.status_code == 200:
                return response.json()
        except Exception:
            return None
        return None
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–π
    def get_campaigns(self, active_only: bool = False) -> Optional[list]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π"""
        endpoint = "/campaigns/" + ("?active_only=true" if active_only else "")
        return self.make_request(endpoint)
    
    def get_campaign(self, campaign_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é –ø–æ ID"""
        return self.make_request(f"/campaigns/{campaign_id}")
    
    def create_campaign(self, campaign_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é"""
        return self.make_request("/campaigns/", method="POST", data=campaign_data)
    
    def update_campaign(self, campaign_id: int, campaign_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é"""
        return self.make_request(f"/campaigns/{campaign_id}", method="PUT", data=campaign_data)
    
    def delete_campaign(self, campaign_id: int) -> Optional[Dict[str, Any]]:
        """–£–¥–∞–ª–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é"""
        return self.make_request(f"/campaigns/{campaign_id}", method="DELETE")
    
    def toggle_campaign_status(self, campaign_id: int) -> Optional[Dict[str, Any]]:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω–∏–∏"""
        return self.make_request(f"/campaigns/{campaign_id}/toggle", method="POST")
    
    def refresh_campaigns_cache(self) -> Optional[Dict[str, Any]]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∫–∞–º–ø–∞–Ω–∏–π"""
        return self.make_request("/campaigns/refresh-cache", method="POST")
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —á–∞—Ç–æ–≤
    def get_active_chats(self) -> Optional[list]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã"""
        return self.make_request("/chats/active")
    
    def get_chat_messages(self, chat_id: str, limit: int = 30) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞"""
        return self.make_request(f"/chats/{chat_id}/messages?limit={limit}")
    
    def send_message(self, chat_id: str, message_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        return self.make_request(f"/chats/{chat_id}/send", method="POST", data=message_data)
    
    def get_chat_info(self, chat_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ"""
        return self.make_request(f"/chats/{chat_id}/info")
    
    def trigger_manual_response(self, chat_id: str, trigger_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞"""
        return self.make_request(f"/chats/{chat_id}/trigger", method="POST", data=trigger_data)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–æ–≤
    def get_logs(self, **params) -> Optional[list]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        query_string = "&".join([f"{k}={v}" for k, v in params.items() if v is not None])
        endpoint = f"/logs/{'?' + query_string if query_string else ''}"
        return self.make_request(endpoint)
    
    def get_stats_overview(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        return self.make_request("/logs/stats/overview")
    
    def get_campaign_stats(self, campaign_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–º–ø–∞–Ω–∏–∏"""
        return self.make_request(f"/logs/campaign/{campaign_id}/stats")
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
    def get_company_settings(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
        return self.make_request("/company/settings")
    
    def update_company_settings(self, settings_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
        return self.make_request("/company/settings", method="PUT", data=settings_data)
    
    def add_telegram_account(self, account_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–î–æ–±–∞–≤–∏—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç"""
        return self.make_request("/company/telegram-accounts", method="POST", data=account_data)
    
    def delete_telegram_account(self, account_id: int) -> Optional[Dict[str, Any]]:
        """–£–¥–∞–ª–∏—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç"""
        return self.make_request(f"/company/telegram-accounts/{account_id}", method="DELETE")
    
    def update_ai_provider(self, provider: str, provider_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        return self.make_request(f"/company/ai-providers/{provider}", method="PUT", data=provider_data)
    
    def update_default_settings(self, settings_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return self.make_request("/company/default-settings", method="PUT", data=settings_data)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    def check_analytics_health(self) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        return self.make_request("/analytics/health")
    
    def get_channel_info(self, channel_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
        return self.make_request(f"/analytics/channel-info/{channel_name}")
    
    def start_channel_analysis(self, analysis_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä—è–º–æ–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞"""
        return self.make_request("/analytics/analyze-channel", method="POST", data=analysis_data)
    
    def get_analysis_status(self, analysis_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞"""
        return self.make_request(f"/analytics/analyze/{analysis_id}/status")
    
    def get_analysis_results(self, analysis_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
        return self.make_request(f"/analytics/analyze/{analysis_id}/results")
    
    def list_analyses(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤"""
        return self.make_request("/analytics/analyze")
    
    def delete_analysis(self, analysis_id: str) -> Optional[Dict[str, Any]]:
        """–£–¥–∞–ª–∏—Ç—å –∞–Ω–∞–ª–∏–∑"""
        return self.make_request(f"/analytics/analyze/{analysis_id}", method="DELETE")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
api_client = APIClient()


def show_connection_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
    server_status = api_client.check_server_status()
    
    if server_status:
        col1, col2, col3 = st.columns(3)
        with col1:
            status_color = "üü¢" if server_status.get("status") == "healthy" else "üî¥"
            st.metric("–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", f"{status_color} {server_status.get('status', 'unknown')}")
        
        with col2:
            telegram_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if server_status.get("telegram_connected") else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
            st.metric("Telegram", telegram_status)
        
        with col3:
            db_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if server_status.get("database") == "connected" else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞"
            st.metric("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", db_status)
        
        return True
    else:
        st.warning("‚ö†Ô∏è Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        st.info("–í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞")
        return False


def handle_api_error(response, success_message: str = "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", 
                    error_message: str = "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ API —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if response is not None:
        st.success(success_message)
        return True
    else:
        st.error(error_message)
        return False


def auto_refresh_component(key: str, interval: int = 5):
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    col1, col2 = st.columns([1, 4])
    with col1:
        auto_refresh = st.checkbox(f"üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=False, key=f"auto_refresh_{key}")
    with col2:
        if st.button("üì• –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å", key=f"refresh_now_{key}"):
            st.rerun()
    
    if auto_refresh:
        time.sleep(interval)
        st.rerun()