#!/usr/bin/env python3
"""
üîê –°–æ–∑–¥–∞–Ω–∏–µ Telegram —Å–µ—Å—Å–∏–∏ –¥–ª—è DigitalOcean App Platform —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é —Å –¥—Ä—É–≥–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
"""
import asyncio
import os
import base64
import json
from dotenv import load_dotenv

load_dotenv()

try:
    from telethon import TelegramClient
    from telethon.errors import PhoneCodeInvalidError, PhoneNumberInvalidError, SessionPasswordNeededError
    from telethon.sessions import StringSession
except ImportError:
    print("‚ùå –û–®–ò–ë–ö–ê: telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install telethon cryptg python-dotenv")
    exit(1)

class AlternativeSessionCreator:
    def __init__(self, phone_number=None):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ .env
        self.api_id = os.getenv("TELEGRAM_API_ID")
        self.api_hash = os.getenv("TELEGRAM_API_HASH")
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥
        if phone_number:
            self.phone = phone_number
        else:
            print("üì± –í–≤–µ–¥–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä +79123456789):")
            self.phone = input("–ù–æ–º–µ—Ä: ").strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not all([self.api_id, self.api_hash, self.phone]):
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã")
            print("–¢—Ä–µ–±—É—é—Ç—Å—è: TELEGRAM_API_ID, TELEGRAM_API_HASH, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            exit(1)
        
        self.api_id = int(self.api_id)
        print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   üì± –¢–µ–ª–µ—Ñ–æ–Ω: {self.phone}")
        print(f"   üîë API ID: {self.api_id}")
        print()
    
    async def create_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º"""
        print("üîê –°–û–ó–î–ê–ù–ò–ï TELEGRAM –°–ï–°–°–ò–ò –° –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ú –ù–û–ú–ï–†–û–ú")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å StringSession (–¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç–∏)
        string_session = StringSession()
        client = TelegramClient(string_session, self.api_id, self.api_hash)
        
        try:
            print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            await client.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            if await client.is_user_authorized():
                print("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
                await self.export_session_data(client)
                return True
            
            print("üìû –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            print(f"üì± –ö–æ–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: {self.phone}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞
            await client.send_code_request(self.phone)
            print("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            while True:
                try:
                    code = input("\nüî¢ –í–≤–µ–¥–∏—Ç–µ 5-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ Telegram: ").strip()
                    
                    if not code or len(code) != 5 or not code.isdigit():
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 5 —Ü–∏—Ñ—Ä.")
                        continue
                    
                    print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
                    await client.sign_in(self.phone, code)
                    break
                    
                except PhoneCodeInvalidError:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    continue
                    
                except SessionPasswordNeededError:
                    # –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    print("üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                    while True:
                        password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ").strip()
                        if password:
                            try:
                                await client.sign_in(password=password)
                                break
                            except Exception as e:
                                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å: {e}")
                                continue
                        else:
                            print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            
            print("‚úÖ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
            await self.export_session_data(client)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
            
        finally:
            await client.disconnect()
    
    async def export_session_data(self, client):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –¥–ª—è App Platform"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await client.get_me()
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} {me.last_name or ''}")
            print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {me.phone}")
            print(f"üÜî ID: {me.id}")
            if me.username:
                print(f"üìß Username: @{me.username}")
            print()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Å—Å–∏–∏
            session_string = client.session.save()
            print("üîë –î–ê–ù–ù–´–ï –î–õ–Ø APP PLATFORM:")
            print("=" * 50)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64 –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            session_b64 = base64.b64encode(session_string.encode()).decode()
            
            print("üìã –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø –û–ö–†–£–ñ–ï–ù–ò–Ø:")
            print(f"TELEGRAM_SESSION_STRING={session_string}")
            print()
            print("üìã –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø –û–ö–†–£–ñ–ï–ù–ò–Ø (BASE64):")
            print(f"TELEGRAM_SESSION_B64={session_b64}")
            print()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
            session_data = {
                "session_string": session_string,
                "session_base64": session_b64,
                "user_info": {
                    "id": me.id,
                    "first_name": me.first_name,
                    "last_name": me.last_name,
                    "username": me.username,
                    "phone": me.phone
                },
                "api_credentials": {
                    "api_id": self.api_id,
                    "api_hash": self.api_hash,
                    "phone": self.phone
                },
                "creation_method": "alternative_phone",
                "instructions": {
                    "app_platform": "–î–æ–±–∞–≤—å—Ç–µ TELEGRAM_SESSION_STRING –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è DigitalOcean App",
                    "format": "Environment Variables ‚Üí TELEGRAM_SESSION_STRING = {session_string}"
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
            filename = f"telegram_session_alternative_{me.phone}.json"
            with open(filename, "w", encoding="utf-8") as f:
                json.dump(session_data, f, indent=2, ensure_ascii=False)
            
            print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
            print()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É
            print("üì∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ü–µ–ª–µ–≤–æ–º—É –∫–∞–Ω–∞–ª—É...")
            try:
                channel = await client.get_entity("@eslitotoeto")
                print(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {channel.title}")
                print(f"   ID: {channel.id}")
                print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {channel.participants_count}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É @eslitotoeto: {e}")
                print("üí° –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É –≤—Ä—É—á–Ω—É—é")
            
            print()
            print("üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
            print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ TELEGRAM_SESSION_STRING")
            print("2. –ó–∞–º–µ–Ω–∏—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è DigitalOcean App Platform")
            print("3. –û–±–Ω–æ–≤–∏—Ç–µ TELEGRAM_PHONE –≤ .env –Ω–∞ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä")
            print("4. –°–¥–µ–ª–∞–π—Ç–µ push –≤ GitHub –¥–ª—è –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")

async def main():
    import sys
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    phone = None
    if len(sys.argv) > 1:
        phone = sys.argv[1]
        print(f"üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: {phone}")
    
    creator = AlternativeSessionCreator(phone)
    success = await creator.create_session()
    
    if success:
        print("\nüéâ –°–ï–°–°–ò–Ø –° –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ú –ù–û–ú–ï–†–û–ú –°–û–ó–î–ê–ù–ê –£–°–ü–ï–®–ù–û!")
        print("üìã –§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –°–ï–°–°–ò–ò")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()