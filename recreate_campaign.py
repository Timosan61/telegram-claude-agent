#!/usr/bin/env python3
"""
Script to recreate campaign for comment monitoring
"""
import asyncio
import requests
import json

async def recreate_campaign():
    """Recreate the campaign for comment monitoring"""
    
    # Campaign data
    campaign_data = {
        "name": "Test Campaign @eslitotoeto Comments",
        "active": True,
        "telegram_chats": ["@eslitotoeto", "eslitotoeto", "1676879122", "2532661483", "8192524245"],
        "keywords": ["–∑–∞–¥–∞—á–∞", "–≤–æ–ø—Ä–æ—Å", "–ø–æ–º–æ—â—å", "—Ç–µ—Å—Ç", "claude"],
        "telegram_account": "+79885517453",
        "ai_provider": "openai",  # Changed to OpenAI since it's available
        "claude_agent_id": "telegram_claude_agent",
        "openai_model": "gpt-4o",
        "context_messages_count": 3,
        "system_instruction": "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º Claude Bot. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∏—Ö –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏.",
        "example_replies": {
            "greeting": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? üëã",
            "help": "–ö–æ–Ω–µ—á–Ω–æ, –ø–æ–º–æ–≥—É! –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ü§î",
            "thanks": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! üòä"
        }
    }
    
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏...")
    
    try:
        # Create campaign
        response = requests.post(
            "https://answerbot-magph.ondigitalocean.app/campaigns",
            json=campaign_data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: {result}")
            return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏: {response.status_code}")
            print(f"Response: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

async def check_campaign_status():
    """Check campaign status"""
    try:
        response = requests.get(
            "https://answerbot-magph.ondigitalocean.app/campaigns",
            timeout=10
        )
        
        if response.status_code == 200:
            campaigns = response.json()
            print(f"üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏: {len(campaigns)}")
            for campaign in campaigns:
                print(f"   - {campaign.get('name', 'Unknown')}: {campaign.get('active', 'Unknown')}")
            return campaigns
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π: {response.status_code}")
            return []
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

async def restart_agent():
    """Restart the telegram agent"""
    try:
        response = requests.post(
            "https://answerbot-magph.ondigitalocean.app/telegram/restart",
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ê–≥–µ–Ω—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω: {result}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """Main function"""
    print("üöÄ –í–æ—Å—Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
    
    # Check current status
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π...")
    campaigns = await check_campaign_status()
    
    if not campaigns:
        print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏...")
        result = await recreate_campaign()
        
        if result:
            print("\n3. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞...")
            await restart_agent()
            
            print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞...")
            await asyncio.sleep(3)
            await check_campaign_status()
    else:
        print("‚úÖ –ö–∞–º–ø–∞–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

if __name__ == "__main__":
    asyncio.run(main())