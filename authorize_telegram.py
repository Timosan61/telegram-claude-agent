#!/usr/bin/env python3
"""
üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram –∞–≥–µ–Ω—Ç–∞
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram
–ó–ê–ü–£–°–ö–ê–ô–¢–ï –¢–û–õ–¨–ö–û –í –†–ï–ê–õ–¨–ù–û–ú –¢–ï–†–ú–ò–ù–ê–õ–ï (–Ω–µ –≤ Claude Code)
"""
import asyncio
import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
load_dotenv()

from telethon import TelegramClient

async def authorize_telegram():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram"""
    print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram Claude Agent")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .env
    api_id = int(os.getenv('TELEGRAM_API_ID'))
    api_hash = os.getenv('TELEGRAM_API_HASH')
    phone = os.getenv('TELEGRAM_PHONE')
    
    print(f"üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
    print(f"üîë API ID: {api_id}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = TelegramClient("telegram_agent", api_id, api_hash)
    
    try:
        await client.connect()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ª–∏ –º—ã —É–∂–µ
        if await client.is_user_authorized():
            me = await client.get_me()
            print(f"‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name}")
            print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {me.phone}")
            print(f"üÜî ID: {me.id}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
            await test_channel_access(client)
            return True
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        print(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ {phone}...")
        sent_code = await client.send_code_request(phone)
        print("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        print()
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SMS –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram")
        code = input("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ").strip()
        
        if not code:
            print("‚ùå –ö–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω")
            return False
        
        try:
            # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
            await client.sign_in(phone, code)
            
        except Exception as sign_in_error:
            # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if "Two-step verification" in str(sign_in_error) or "password" in str(sign_in_error).lower():
                print("üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                password = input("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ").strip()
                
                if not password:
                    print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –≤–≤–µ–¥–µ–Ω")
                    return False
                
                await client.sign_in(password=password)
            else:
                raise sign_in_error
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        me = await client.get_me()
        print(f"\nüéâ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
        print(f"üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name}")
        print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {me.phone}")
        print(f"üÜî ID: {me.id}")
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
        await test_channel_access(client)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False
        
    finally:
        await client.disconnect()

async def test_channel_access(client):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É @eslitotoeto"""
    print("üì∫ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É...")
    print("-" * 30)
    
    try:
        channel = await client.get_entity("@eslitotoeto")
        print(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {channel.title}")
        print(f"üÜî ID –∫–∞–Ω–∞–ª–∞: {channel.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = await client.get_messages(channel, limit=3)
        print(f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords = ["–∏–∏", "–±–æ—Ç", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–ø–æ–º–æ—â—å"]
        for i, msg in enumerate(messages, 1):
            if msg.text:
                text_preview = msg.text[:50] + "..." if len(msg.text) > 50 else msg.text
                print(f"   {i}. {text_preview}")
                
                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                found_keywords = [kw for kw in keywords if kw.lower() in msg.text.lower()]
                if found_keywords:
                    print(f"      üî• –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(found_keywords)}")
        
        print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("‚úÖ –ê–≥–µ–Ω—Ç –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ @eslitotoeto")
        print("‚úÖ –ì–æ—Ç–æ–≤ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –∏ –æ—Ç–≤–µ—Ç–∞–º")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–∞–Ω–∞–ª–æ–º @eslitotoeto: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print("   - –ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª @eslitotoeto")
        print("   - –ö–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîê Telegram Authorization Script")
    print("–í–ê–ñ–ù–û: –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ!")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['TELEGRAM_API_ID', 'TELEGRAM_API_HASH', 'TELEGRAM_PHONE']
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            print(f"   - {var}")
        print("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        return
    
    try:
        success = await authorize_telegram()
        
        if success:
            print("\n" + "=" * 50)
            print("üöÄ –ì–û–¢–û–í–û –ö –ó–ê–ü–£–°–ö–£!")
            print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å:")
            print("1. python run.py                    # Backend —Å–µ—Ä–≤–µ—Ä")
            print("2. streamlit run streamlit_app.py   # –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
            print()
            print("ü§ñ –°–æ–∑–¥–∞–π—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é –∏ –∞–≥–µ–Ω—Ç –Ω–∞—á–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!")
        else:
            print("\n‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫–æ–¥")
            
    except KeyboardInterrupt:
        print("\n\nüëã –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())