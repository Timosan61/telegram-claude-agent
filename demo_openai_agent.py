#!/usr/bin/env python3
"""
üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Telegram –∞–≥–µ–Ω—Ç–∞ —Å OpenAI
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""
import asyncio
import os
import sys
from datetime import datetime
from dotenv import load_dotenv

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
load_dotenv()

from utils.openai.client import OpenAIClient

class OpenAIAgentDemo:
    def __init__(self):
        self.openai_client = None
        
    async def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞"""
        print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Telegram –∞–≥–µ–Ω—Ç–∞ —Å OpenAI")
        print("=" * 60)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
        if not await self.init_openai_client():
            return
        
        # –î–µ–º–æ-–∫–∞–º–ø–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        demo_campaign = self.create_demo_campaign()
        print(f"üìã –°–æ–∑–¥–∞–Ω–∞ –¥–µ–º–æ-–∫–∞–º–ø–∞–Ω–∏—è: {demo_campaign.name}")
        print(f"ü§ñ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {demo_campaign.ai_provider}")
        print(f"üß† –ú–æ–¥–µ–ª—å: {demo_campaign.openai_model}")
        print()
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        await self.test_scenario_1(demo_campaign)
        await self.test_scenario_2(demo_campaign)
        await self.test_scenario_3(demo_campaign)
        
        print("\n" + "=" * 60)
        print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("‚úÖ OpenAI —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram –∞–≥–µ–Ω—Ç–∞")
        print("üí° –ê–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ OpenAI")
    
    async def init_openai_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            self.openai_client = OpenAIClient()
            print("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")
            return False
    
    def create_demo_campaign(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∫–∞–º–ø–∞–Ω–∏–∏"""
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç Campaign
        class DemoCampaign:
            def __init__(self):
                self.id = 1
                self.name = "–î–µ–º–æ: OpenAI –ø–æ–º–æ—â–Ω–∏–∫"
                self.ai_provider = "openai"
                self.openai_model = "gpt-3.5-turbo"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –¥–µ—à–µ–≤—É—é –º–æ–¥–µ–ª—å
                self.claude_agent_id = None
                self.system_instruction = """
–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram –∫–∞–Ω–∞–ª–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ Python, JavaScript –∏ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.
–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.
                """.strip()
                self.example_replies = {
                    "python": "–í–æ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –Ω–∞ Python:",
                    "–æ—à–∏–±–∫–∞": "–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç—É –æ—à–∏–±–∫—É:",
                    "–ø–æ–º–æ—â—å": "–ö–æ–Ω–µ—á–Ω–æ, –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è!"
                }
                self.keywords = ["–∏–∏", "–±–æ—Ç", "–ø–æ–º–æ—â—å", "python", "javascript", "–æ—à–∏–±–∫–∞"]
                self.context_messages_count = 3
        
        return DemoCampaign()
    
    async def test_scenario_1(self, campaign):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –æ Python"""
        print("üß™ –°–¶–ï–ù–ê–†–ò–ô 1: –ü—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –æ Python")
        print("-" * 40)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        context_messages = [
            {"date": "2024-08-01 14:30:00", "text": "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!"},
            {"date": "2024-08-01 14:31:00", "text": "–ò–∑—É—á–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"},
            {"date": "2024-08-01 14:32:00", "text": "Python –∫–∞–∂–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —è–∑—ã–∫–æ–º"}
        ]
        
        trigger_message = "–∏–∏ –ø–æ–º–æ–≥–∏ —Å –∏–∑—É—á–µ–Ω–∏–µ–º Python –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"
        
        print(f"üí¨ –¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {trigger_message}")
        print(f"üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç: {len(context_messages)} –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await self.generate_response_for_campaign(
            campaign, trigger_message, context_messages
        )
        
        print(f"ü§ñ –û—Ç–≤–µ—Ç OpenAI:")
        print(f"   {response}")
        print()
    
    async def test_scenario_2(self, campaign):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 2: –í–æ–ø—Ä–æ—Å –æ–± –æ—à–∏–±–∫–µ –≤ –∫–æ–¥–µ"""
        print("üß™ –°–¶–ï–ù–ê–†–ò–ô 2: –í–æ–ø—Ä–æ—Å –æ–± –æ—à–∏–±–∫–µ –≤ –∫–æ–¥–µ")
        print("-" * 40)
        
        context_messages = [
            {"date": "2024-08-01 14:35:00", "text": "–ü–∏—à—É —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–ø—Ç"},
            {"date": "2024-08-01 14:36:00", "text": "print('Hello World)"},
            {"date": "2024-08-01 14:37:00", "text": "–í—ã–¥–∞–µ—Ç –∫–∞–∫—É—é-—Ç–æ –æ—à–∏–±–∫—É"}
        ]
        
        trigger_message = "–±–æ—Ç –ø–æ–º–æ–≥–∏, –æ—à–∏–±–∫–∞ SyntaxError: unterminated string literal"
        
        print(f"üí¨ –¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {trigger_message}")
        
        response = await self.generate_response_for_campaign(
            campaign, trigger_message, context_messages
        )
        
        print(f"ü§ñ –û—Ç–≤–µ—Ç OpenAI:")
        print(f"   {response}")
        print()
    
    async def test_scenario_3(self, campaign):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 3: –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–¥–∞"""
        print("üß™ –°–¶–ï–ù–ê–†–ò–ô 3: –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–¥–∞")
        print("-" * 40)
        
        context_messages = [
            {"date": "2024-08-01 14:40:00", "text": "–•–æ—á—É –∏–∑—É—á–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å —Ñ–∞–π–ª–∞–º–∏"},
            {"date": "2024-08-01 14:41:00", "text": "–ù—É–∂–Ω–æ —á–∏—Ç–∞—Ç—å CSV —Ñ–∞–π–ª—ã"},
            {"date": "2024-08-01 14:42:00", "text": "–ò –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"}
        ]
        
        trigger_message = "–∏–∏ –ø–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞ –Ω–∞ Python"
        
        print(f"üí¨ –¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {trigger_message}")
        
        response = await self.generate_response_for_campaign(
            campaign, trigger_message, context_messages
        )
        
        print(f"ü§ñ –û—Ç–≤–µ—Ç OpenAI:")
        print(f"   {response}")
        print()
    
    async def generate_response_for_campaign(self, campaign, trigger_message, context_messages):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞)"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥ —á—Ç–æ –∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∞–≥–µ–Ω—Ç–µ
        prompt = self.openai_client.format_telegram_context(
            system_instruction=campaign.system_instruction,
            context_messages=context_messages,
            trigger_message=trigger_message,
            example_replies=campaign.example_replies
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await self.openai_client.generate_response(
            prompt=prompt,
            model=campaign.openai_model,
            max_tokens=300,
            temperature=0.7
        )
        
        return response

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ OpenAI Agent Demo")
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Telegram –∞–≥–µ–Ω—Ç–∞ —Å OpenAI –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ .env —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    demo = OpenAIAgentDemo()
    await demo.run_demo()
    
    print("\nüöÄ –ß–¢–û –î–ê–õ–¨–®–ï?")
    print("1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: python complete_setup.py")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é —Å ai_provider='openai' –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend —Å–µ—Ä–≤–µ—Ä: python run.py")
    print("4. –ê–≥–µ–Ω—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤!")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()