from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os
from dotenv import load_dotenv

load_dotenv()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - Supabase PostgreSQL –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π SQLite –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
def get_database_url():
    supabase_url = os.getenv("SUPABASE_URL")
    supabase_service_key = os.getenv("SUPABASE_SERVICE_ROLE_KEY") 
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–µ–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —á—Ç–æ service key –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç anon key
    anon_key = os.getenv("SUPABASE_ANON_KEY")
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ JWT —Ç–æ–∫–µ–Ω (3 —á–∞—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ —Ç–æ—á–∫–∞–º–∏)
    is_valid_jwt = len(supabase_service_key.split('.')) == 3 if supabase_service_key else False
    
    if (supabase_url and supabase_service_key and 
        anon_key and supabase_service_key != anon_key and
        is_valid_jwt):
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º PostgreSQL connection string –¥–ª—è Supabase
        # –ò–∑–≤–ª–µ–∫–∞–µ–º project_id –∏–∑ URL –≤–∏–¥–∞ https://project_id.supabase.co
        project_id = supabase_url.replace("https://", "").replace(".supabase.co", "")
        postgres_url = f"postgresql://postgres.{project_id}:{supabase_service_key}@aws-0-eu-north-1.pooler.supabase.com:6543/postgres"
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase: postgresql://postgres.{project_id}:***@aws-0-eu-north-1.pooler.supabase.com:6543/postgres")
        return postgres_url
    else:
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üîç Debug info:")
        print(f"  SUPABASE_URL: {'‚úÖ' if supabase_url else '‚ùå'}")
        print(f"  SUPABASE_SERVICE_ROLE_KEY: {'‚úÖ' if supabase_service_key else '‚ùå'}")
        print(f"  SUPABASE_ANON_KEY: {'‚úÖ' if anon_key else '‚ùå'}")
        if supabase_service_key and anon_key:
            print(f"  Keys different: {'‚úÖ' if supabase_service_key != anon_key else '‚ùå'}")
            is_valid_jwt = len(supabase_service_key.split('.')) == 3 if supabase_service_key else False
            print(f"  Valid JWT format: {'‚úÖ' if is_valid_jwt else '‚ùå'}")
    
    # Fallback –∫ DATABASE_URL –∏–ª–∏ SQLite –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    print("üîÑ Fallback –∫ SQLite –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    return os.getenv("DATABASE_URL", "sqlite:///./campaigns.db")

DATABASE_URL = get_database_url()

# –°–æ–∑–¥–∞–µ–º engine —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
if "postgresql" in DATABASE_URL:
    # PostgreSQL/Supabase –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    engine = create_engine(
        DATABASE_URL,
        pool_pre_ping=True,
        pool_recycle=300,
        echo=False
    )
else:
    # SQLite –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    engine = create_engine(
        DATABASE_URL,
        connect_args={"check_same_thread": False},
        echo=False
    )

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()


def get_db():
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    Base.metadata.create_all(bind=engine)