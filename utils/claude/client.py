import os
import asyncio
import subprocess
from typing import Optional, Dict, Any
from pathlib import Path
import tempfile
import json

from anthropic import Anthropic


class ClaudeClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude Code SDK –∏ Anthropic API
    """
    
    def __init__(self):
        self.api_key = os.getenv("ANTHROPIC_API_KEY")
        if not self.api_key:
            raise ValueError("ANTHROPIC_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Anthropic –∫–ª–∏–µ–Ω—Ç–∞
        self.anthropic = Anthropic(api_key=self.api_key)
        
        # –ü—É—Ç—å –∫ Claude Code CLI (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        self.claude_code_path = self._find_claude_code_cli()
        
        print("üß† Claude Client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _find_claude_code_cli(self) -> Optional[str]:
        """–ü–æ–∏—Å–∫ Claude Code CLI –≤ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            result = subprocess.run(["which", "claude"], capture_output=True, text=True)
            if result.returncode == 0:
                return result.stdout.strip()
        except:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
        possible_paths = [
            "/usr/local/bin/claude",
            "/usr/bin/claude",
            "~/.local/bin/claude",
            "claude"  # –í PATH
        ]
        
        for path in possible_paths:
            expanded_path = Path(path).expanduser()
            if expanded_path.exists():
                return str(expanded_path)
        
        return None
    
    async def generate_response(
        self,
        prompt: str,
        agent_id: Optional[str] = None,
        model: str = "claude-3-sonnet-20240229",
        max_tokens: int = 1000,
        temperature: float = 0.7
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Claude Code SDK –∏–ª–∏ Anthropic API
        """
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Claude Code CLI
            if self.claude_code_path and agent_id:
                return await self._generate_with_claude_code(prompt, agent_id)
            
            # Fallback –Ω–∞ –ø—Ä—è–º–æ–π API Anthropic
            return await self._generate_with_anthropic_api(
                prompt, model, max_tokens, temperature
            )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
    
    async def _generate_with_claude_code(self, prompt: str, agent_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Claude Code CLI"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º
            with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
                f.write(prompt)
                temp_file = f.name
            
            # –ö–æ–º–∞–Ω–¥–∞ Claude Code
            cmd = [
                self.claude_code_path,
                "--agent", agent_id,
                "--file", temp_file,
                "--output", "text"
            ]
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            os.unlink(temp_file)
            
            if process.returncode == 0:
                return stdout.decode().strip()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Claude Code CLI: {stderr.decode()}")
                raise Exception(f"Claude Code CLI error: {stderr.decode()}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Claude Code CLI: {e}")
            raise
    
    async def _generate_with_anthropic_api(
        self,
        prompt: str,
        model: str,
        max_tokens: int,
        temperature: float
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API Anthropic"""
        try:
            response = await asyncio.to_thread(
                self.anthropic.messages.create,
                model=model,
                max_tokens=max_tokens,
                temperature=temperature,
                messages=[
                    {
                        "role": "user",
                        "content": prompt
                    }
                ]
            )
            
            return response.content[0].text
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Anthropic API: {e}")
            raise
    
    async def chat_completion(
        self,
        messages: list,
        model: str = "claude-3-sonnet-20240229",
        max_tokens: int = 1000,
        temperature: float = 0.7
    ) -> str:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            response = await asyncio.to_thread(
                self.anthropic.messages.create,
                model=model,
                max_tokens=max_tokens,
                temperature=temperature,
                messages=messages
            )
            
            return response.content[0].text
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ chat completion: {e}")
            raise
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Claude"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ Anthropic API
            response = self.anthropic.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=10,
                messages=[
                    {
                        "role": "user",
                        "content": "Hi"
                    }
                ]
            )
            
            return len(response.content) > 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def get_available_models(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        return [
            "claude-3-opus-20240229",
            "claude-3-sonnet-20240229",
            "claude-3-haiku-20240307"
        ]
    
    async def create_agent_session(self, session_id: str, system_prompt: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è"""
        return {
            "session_id": session_id,
            "system_prompt": system_prompt,
            "messages": [],
            "created_at": asyncio.get_event_loop().time()
        }
    
    async def add_message_to_session(
        self,
        session_id: str,
        role: str,
        content: str,
        sessions_storage: Dict[str, Dict]
    ):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é"""
        if session_id in sessions_storage:
            sessions_storage[session_id]["messages"].append({
                "role": role,
                "content": content
            })
    
    async def generate_from_session(
        self,
        session_id: str,
        sessions_storage: Dict[str, Dict],
        model: str = "claude-3-sonnet-20240229"
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∏–∑ —Å–µ—Å—Å–∏–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        if session_id not in sessions_storage:
            raise ValueError(f"–°–µ—Å—Å–∏—è {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        session = sessions_storage[session_id]
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        messages = []
        
        if session["system_prompt"]:
            messages.append({
                "role": "system",
                "content": session["system_prompt"]
            })
        
        messages.extend(session["messages"])
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        response = await self.chat_completion(messages, model)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ—Å—Å–∏—é
        await self.add_message_to_session(
            session_id, "assistant", response, sessions_storage
        )
        
        return response