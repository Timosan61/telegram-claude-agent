#!/usr/bin/env python3
"""
üîç –ü–æ–∏—Å–∫ DigitalOcean –¥—Ä–æ–ø–ª–µ—Ç–∞ —Å Telegram Agent
"""
import os
import json
import requests
from dotenv import load_dotenv

load_dotenv()

def get_droplets():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥—Ä–æ–ø–ª–µ—Ç–æ–≤"""
    token = os.getenv('DIGITALOCEAN_TOKEN')
    if not token:
        print("‚ùå DIGITALOCEAN_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    try:
        response = requests.get('https://api.digitalocean.com/v2/droplets', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DigitalOcean API: {e}")
        return None

def analyze_droplet(droplet):
    """–ê–Ω–∞–ª–∏–∑ –¥—Ä–æ–ø–ª–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ Telegram Agent"""
    score = 0
    reasons = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
    name = droplet.get('name', '').lower()
    if any(keyword in name for keyword in ['telegram', 'agent', 'bot']):
        score += 3
        reasons.append(f"üìõ –ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {droplet['name']}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (—Ç–∏–ø–∏—á–Ω—ã–π –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
    size_slug = droplet.get('size_slug', '')
    if size_slug in ['s-1vcpu-2gb', 's-2vcpu-4gb', 's-1vcpu-1gb']:
        score += 2
        reasons.append(f"üíæ –ü–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–º–µ—Ä: {size_slug}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ Ubuntu (—Ç–∏–ø–∏—á–Ω—ã–π –¥–ª—è Python –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
    image = droplet.get('image', {})
    if image.get('distribution') == 'Ubuntu':
        score += 1
        reasons.append(f"üêß Ubuntu: {image.get('name', 'Unknown')}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º)
    if droplet.get('status') == 'active':
        score += 1
        reasons.append("‚úÖ –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–Ω—ã–π")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ (–Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π)
    created_at = droplet.get('created_at', '')
    if '2025' in created_at:
        score += 1
        reasons.append(f"üìÖ –°–æ–∑–¥–∞–Ω –≤ 2025: {created_at[:10]}")
    
    return score, reasons

def main():
    print("üîç –ü–û–ò–°–ö DITALOCEAN –î–†–û–ü–õ–ï–¢–ê –° TELEGRAM AGENT")
    print("=" * 55)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä–æ–ø–ª–µ—Ç–æ–≤
    data = get_droplets()
    if not data:
        return
    
    droplets = data.get('droplets', [])
    if not droplets:
        print("‚ùå –î—Ä–æ–ø–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ –¥—Ä–æ–ø–ª–µ—Ç–æ–≤: {len(droplets)}")
    print()
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –¥—Ä–æ–ø–ª–µ—Ç–∞
    candidates = []
    
    for droplet in droplets:
        score, reasons = analyze_droplet(droplet)
        candidates.append((score, droplet, reasons))
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    candidates.sort(key=lambda x: x[0], reverse=True)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for i, (score, droplet, reasons) in enumerate(candidates, 1):
        print(f"üèÜ –î–†–û–ü–õ–ï–¢ #{i} (–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score}/8)")
        print("‚îÄ" * 50)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üìõ –ò–º—è: {droplet['name']}")
        print(f"üÜî ID: {droplet['id']}")
        print(f"üåê IP –∞–¥—Ä–µ—Å–∞:")
        
        # IP –∞–¥—Ä–µ—Å–∞
        networks = droplet.get('networks', {})
        v4_networks = networks.get('v4', [])
        
        public_ips = []
        private_ips = []
        
        for network in v4_networks:
            ip = network.get('ip_address')
            net_type = network.get('type')
            if net_type == 'public':
                public_ips.append(ip)
            elif net_type == 'private':
                private_ips.append(ip)
        
        for ip in public_ips:
            print(f"   üåç –ü—É–±–ª–∏—á–Ω—ã–π: {ip}")
        for ip in private_ips:
            print(f"   üè† –ü—Ä–∏–≤–∞—Ç–Ω—ã–π: {ip}")
        
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        print(f"üíª –†–∞–∑–º–µ—Ä: {droplet.get('size_slug', 'Unknown')}")
        print(f"üíæ RAM: {droplet.get('memory', 0)} MB")
        print(f"üñ•Ô∏è  CPU: {droplet.get('vcpus', 0)} vCPU")
        print(f"üíΩ –î–∏—Å–∫: {droplet.get('disk', 0)} GB")
        print(f"üìç –†–µ–≥–∏–æ–Ω: {droplet.get('region', {}).get('name', 'Unknown')}")
        print(f"üêß –û–°: {droplet.get('image', {}).get('name', 'Unknown')}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {droplet.get('status', 'Unknown')}")
        print(f"üìÖ –°–æ–∑–¥–∞–Ω: {droplet.get('created_at', 'Unknown')[:19]}")
        
        # –ü—Ä–∏—á–∏–Ω—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        if reasons:
            print(f"üéØ –ü—Ä–∏—á–∏–Ω—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏:")
            for reason in reasons:
                print(f"   {reason}")
        
        print()
        
        # –ö–æ–º–∞–Ω–¥—ã SSH –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        if i == 1 and public_ips:
            print("üöÄ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø (–ª—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç):")
            print("‚îÄ" * 50)
            for ip in public_ips:
                print(f"üîë SSH root: ssh root@{ip}")
                print(f"üîë SSH ubuntu: ssh ubuntu@{ip}")
            print()
            print("üìã –ö–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
            print("   docker ps                                    # –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
            print("   docker exec -it CONTAINER_ID /bin/bash      # –≤–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
            print("   python reauth_telegram.py                   # –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            print()
        
        if i < len(candidates):
            print("‚îÄ" * 55)
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if candidates:
        best_droplet = candidates[0][1]
        best_public_ips = []
        
        for network in best_droplet.get('networks', {}).get('v4', []):
            if network.get('type') == 'public':
                best_public_ips.append(network.get('ip_address'))
        
        print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("=" * 55)
        print(f"‚úÖ –õ—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç: {best_droplet['name']}")
        
        if best_public_ips:
            print(f"üåê IP –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {best_public_ips[0]}")
            print()
            print("üöÄ –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢:")
            print(f"   1. ssh root@{best_public_ips[0]}")
            print("   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: ./docker_connect.sh")
            print("   3. –í –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: ./container_auth.sh")
            print("   4. –ü—Ä–æ–≤–µ—Ä–∫–∞: ./verify_auth_results.sh")
        else:
            print("‚ö†Ô∏è  –ü—É–±–ª–∏—á–Ω—ã–π IP –Ω–µ –Ω–∞–π–¥–µ–Ω")

if __name__ == "__main__":
    main()