#!/usr/bin/env python3
"""
üîê –ë–´–°–¢–†–ê–Ø –ü–ï–†–ï–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø Telegram –∞–≥–µ–Ω—Ç–∞

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ API –¥–∞–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞.

–ó–ê–ü–£–°–ö: python reauth_telegram.py
"""
import asyncio
import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

try:
    from telethon import TelegramClient
    from telethon.errors import PhoneCodeInvalidError, PhoneNumberInvalidError, SessionPasswordNeededError
except ImportError:
    print("‚ùå –û–®–ò–ë–ö–ê: telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install telethon cryptg python-dotenv")
    sys.exit(1)

class TelegramReauth:
    def __init__(self):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ .env
        self.api_id = os.getenv("TELEGRAM_API_ID")
        self.api_hash = os.getenv("TELEGRAM_API_HASH")
        self.phone = os.getenv("TELEGRAM_PHONE")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not all([self.api_id, self.api_hash, self.phone]):
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env")
            print("–¢—Ä–µ–±—É—é—Ç—Å—è: TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_PHONE")
            sys.exit(1)
        
        self.api_id = int(self.api_id)
        print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   üì± –¢–µ–ª–µ—Ñ–æ–Ω: {self.phone}")
        print(f"   üîë API ID: {self.api_id}")
        print()
    
    async def reauthorize(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print("üîê –ü–ï–†–ï–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø TELEGRAM –ê–ì–ï–ù–¢–ê")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é)
        client = TelegramClient("telegram_agent", self.api_id, self.api_hash)
        
        try:
            print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            await client.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            if await client.is_user_authorized():
                print("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø...")
                await self.verify_access(client)
                return True
            
            print("üìû –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            print(f"üì± –ö–æ–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: {self.phone}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞
            await client.send_code_request(self.phone)
            print("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            while True:
                try:
                    code = input("\nüî¢ –í–≤–µ–¥–∏—Ç–µ 5-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ Telegram: ").strip()
                    
                    if not code or len(code) != 5 or not code.isdigit():
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 5 —Ü–∏—Ñ—Ä.")
                        continue
                    
                    print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
                    await client.sign_in(self.phone, code)
                    break
                    
                except PhoneCodeInvalidError:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    continue
                    
                except SessionPasswordNeededError:
                    # –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    print("üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                    while True:
                        password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ").strip()
                        if password:
                            try:
                                await client.sign_in(password=password)
                                break
                            except Exception as e:
                                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å: {e}")
                                continue
                        else:
                            print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    break
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                    return False
            
            print("üéâ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
            await self.verify_access(client)
            return True
            
        except PhoneNumberInvalidError:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {self.phone}")
            return False
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
            
        finally:
            await client.disconnect()
    
    async def verify_access(self, client):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await client.get_me()
            print(f"\n‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} {me.last_name or ''}")
            print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {me.phone}")
            print(f"üÜî ID: {me.id}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏–∞–ª–æ–≥–∞–º
            print(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç–∞–º...")
            
            dialogs = []
            target_found = False
            
            async for dialog in client.iter_dialogs(limit=15):
                dialog_info = {
                    'name': dialog.name,
                    'id': dialog.id,
                    'type': '–∫–∞–Ω–∞–ª' if dialog.is_channel else ('–≥—Ä—É–ø–ø–∞' if dialog.is_group else '–ª–∏—á–Ω—ã–π')
                }
                dialogs.append(dialog_info)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
                if 'eslitotoeto' in dialog.name.lower():
                    target_found = True
                    print(f"üéØ –¶–ï–õ–ï–í–û–ô –ö–ê–ù–ê–õ –ù–ê–ô–î–ï–ù: {dialog.name} (ID: {dialog.id})")
            
            print(f"\nüìä –î–æ—Å—Ç—É–ø–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: {len(dialogs)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–∏–∞–ª–æ–≥–æ–≤
            for i, dialog in enumerate(dialogs[:5], 1):
                print(f"  {i}. {dialog['type']}: {dialog['name']}")
            
            if len(dialogs) > 5:
                print(f"  ... –∏ –µ—â–µ {len(dialogs) - 5} –¥–∏–∞–ª–æ–≥–æ–≤")
            
            if target_found:
                print(f"\nüéâ –¶–ï–õ–ï–í–û–ô –ö–ê–ù–ê–õ @eslitotoeto –î–û–°–¢–£–ü–ï–ù!")
            else:
                print(f"\n‚ö†Ô∏è  –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª @eslitotoeto –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–≤—ã—Ö 15 –¥–∏–∞–ª–æ–≥–∞—Ö")
                print(f"   –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    reauth = TelegramReauth()
    success = await reauth.reauthorize()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ –ü–ï–†–ï–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print(f"üìÅ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: telegram_agent.session")
        print(f"üîß –¢–µ–ø–µ—Ä—å backend —Å–º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
        print(f"üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API: curl https://answerbot-magph.ondigitalocean.app/health")
    else:
        print("‚ùå –ü–ï–†–ï–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ù–ï –£–î–ê–õ–ê–°–¨")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ .env –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

if __name__ == "__main__":
    print("ü§ñ Telegram Claude Agent - –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ Telegram –¥–ª—è –∞–≥–µ–Ω—Ç–∞\n")
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()