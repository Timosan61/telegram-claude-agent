import asyncio
import os
import time
import base64
import logging
from typing import List, Dict, Optional
from datetime import datetime

from telethon import TelegramClient, events
from telethon.sessions import StringSession
from telethon.tl.types import Message, User, Chat, Channel
from telethon.tl.functions.channels import GetFullChannelRequest, JoinChannelRequest
from sqlalchemy.orm import Session

from database.models.base import SessionLocal
from database.models.campaign import Campaign
from database.models.log import ActivityLog

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ AI –∫–ª–∏–µ–Ω—Ç—ã (–∑–∞–º–µ–Ω—è—é—Ç utils.*)
class SimpleClaudeClient:
    """–ü—Ä–æ—Å—Ç–æ–π Claude –∫–ª–∏–µ–Ω—Ç"""
    def __init__(self):
        try:
            import anthropic
            self.api_key = os.getenv("ANTHROPIC_API_KEY")
            if self.api_key:
                self.client = anthropic.Anthropic(api_key=self.api_key)
                logger.info("Claude –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                self.client = None
        except ImportError:
            self.client = None
            
    async def generate_response(self, prompt: str, **kwargs) -> str:
        if not self.client:
            return "Claude –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ANTHROPIC_API_KEY –∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É anthropic"
        try:
            import asyncio
            response = await asyncio.to_thread(
                self.client.messages.create,
                model="claude-3-sonnet-20240229",
                max_tokens=1000,
                messages=[{"role": "user", "content": prompt}]
            )
            return response.content[0].text
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ Claude: {e}"

class SimpleOpenAIClient:
    """–ü—Ä–æ—Å—Ç–æ–π OpenAI –∫–ª–∏–µ–Ω—Ç"""
    def __init__(self):
        try:
            import openai
            self.api_key = os.getenv("OPENAI_API_KEY")
            if self.api_key:
                self.client = openai.OpenAI(api_key=self.api_key)
                logger.info("OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                self.client = None
        except ImportError:
            self.client = None
            
    async def generate_response(self, prompt: str, **kwargs) -> str:
        if not self.client:
            return "OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ OPENAI_API_KEY –∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É openai"
        try:
            import asyncio
            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model="gpt-4",
                max_tokens=1000,
                messages=[{"role": "user", "content": prompt}]
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ OpenAI: {e}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
try:
    ClaudeClient = SimpleClaudeClient
    CLAUDE_AVAILABLE = True
except:
    CLAUDE_AVAILABLE = False
    logger.warning("ClaudeClient –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

try:
    OpenAIClient = SimpleOpenAIClient
    OPENAI_AVAILABLE = True
except:
    OPENAI_AVAILABLE = False
    logger.warning("OpenAIClient –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# ZepMemoryManager –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –∑–∞–≥–ª—É—à–∫—É
ZEP_AVAILABLE = False
ZepMemoryManager = None
logger.info("ZepMemoryManager –æ—Ç–∫–ª—é—á–µ–Ω (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)")


class TelegramAgentAppPlatform:
    """
    Telegram-–∞–≥–µ–Ω—Ç –¥–ª—è DigitalOcean App Platform
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç StringSession –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    """
    
    def __init__(self):
        self.api_id = int(os.getenv("TELEGRAM_API_ID"))
        self.api_hash = os.getenv("TELEGRAM_API_HASH")
        self.phone = os.getenv("TELEGRAM_PHONE")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.session_string = self._get_session_from_env()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å StringSession
        if self.session_string:
            session = StringSession(self.session_string)
            self.client = TelegramClient(session, self.api_id, self.api_hash)
            logger.info("TelegramClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–æ–≤–∞–Ω —Å StringSession")
        else:
            # Fallback –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            self.client = TelegramClient("telegram_agent", self.api_id, self.api_hash)
            logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª–æ–≤–∞—è —Å–µ—Å—Å–∏—è (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)")
        
        # AI –∫–ª–∏–µ–Ω—Ç—ã - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        if CLAUDE_AVAILABLE:
            try:
                self.claude_client = ClaudeClient()
                logger.info("Claude Client –¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                logger.warning(f"Claude Client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                self.claude_client = None
        else:
            self.claude_client = None
            logger.warning("Claude Client –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ OpenAI")
        
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞...")
            self.openai_client = OpenAIClient()
            logger.info("OpenAI Client —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"OpenAI Client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {type(e).__name__}: {str(e)}")
            self.openai_client = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–º—è—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if ZEP_AVAILABLE:
            self.memory_manager = ZepMemoryManager()
            logger.info("ZepMemoryManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            self.memory_manager = None
            logger.warning("–†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–º—è—Ç–∏")
        
        # –ö—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
        self.active_campaigns: List[Campaign] = []
        self.last_campaign_update = 0
        self.campaign_cache_ttl = int(os.getenv("CACHE_TTL", "60"))
        
        # –ö—ç—à –≥—Ä—É–ø–ø –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤
        self.channel_discussion_groups: Dict[str, int] = {}
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.is_connected = False
        self.is_authorized = False
    
    def _get_session_from_env(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏
        session_string = os.getenv("TELEGRAM_SESSION_STRING")
        if session_string:
            logger.info("–ù–∞–π–¥–µ–Ω–∞ TELEGRAM_SESSION_STRING")
            return session_string
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å base64 –≤–µ—Ä—Å–∏—é
        session_b64 = os.getenv("TELEGRAM_SESSION_B64")
        if session_b64:
            try:
                session_string = base64.b64decode(session_b64).decode()
                print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ TELEGRAM_SESSION_B64, –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∞")
                return session_string
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è TELEGRAM_SESSION_B64: {e}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        for var_name in ["TELEGRAM_SESSION", "SESSION_STRING", "TG_SESSION"]:
            session = os.getenv(var_name)
            if session:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è –≤ {var_name}")
                return session
        
        logger.warning("–°–µ—Å—Å–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None
    
    async def get_channel_discussion_group(self, channel_identifier: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if channel_identifier in self.channel_discussion_groups:
                return self.channel_discussion_groups[channel_identifier]
            
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞–Ω–∞–ª–∞
            channel = await self.client.get_entity(channel_identifier)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            full_channel = await self.client(GetFullChannelRequest(channel))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ linked_chat_id (–≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π)
            if hasattr(full_channel.full_chat, 'linked_chat_id') and full_channel.full_chat.linked_chat_id:
                discussion_group_id = full_channel.full_chat.linked_chat_id
                
                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.channel_discussion_groups[channel_identifier] = discussion_group_id
                
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è {channel_identifier}: {discussion_group_id}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                try:
                    discussion_entity = await self.client.get_entity(discussion_group_id)
                    print(f"   üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {getattr(discussion_entity, 'title', 'None')}")
                    print(f"   üîí –¢–∏–ø: {type(discussion_entity)}")
                    print(f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {getattr(discussion_entity, 'participants_count', 'Unknown')}")
                    
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    messages_count = 0
                    async for message in self.client.iter_messages(discussion_entity, limit=5):
                        messages_count += 1
                    
                    if messages_count == 0:
                        logger.warning("   –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π")
                    else:
                        logger.info(f"   –ù–∞–π–¥–µ–Ω–æ {messages_count} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π")
                    
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                    try:
                        print(f"   üîß –ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—á–∞—Å—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π...")
                        activation_message = "ü§ñ Bot activation - starting to monitor comments"
                        await self.client.send_message(discussion_entity, activation_message)
                        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π")
                    except Exception as activation_error:
                        print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {activation_error}")
                        print(f"   üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                        
                except Exception as diag_error:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {diag_error}")
                
                return discussion_group_id
            else:
                print(f"‚ö†Ô∏è –£ –∫–∞–Ω–∞–ª–∞ {channel_identifier} –Ω–µ—Ç –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è {channel_identifier}: {e}")
            return None
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞"""
        try:
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            await self.client.connect()
            self.is_connected = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            self.is_authorized = await self.client.is_user_authorized()
            
            if self.is_authorized:
                logger.info("Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                me = await self.client.get_me()
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} {me.last_name or ''}, —Ç–µ–ª–µ—Ñ–æ–Ω: {me.phone}")
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
                await self._setup_event_handlers()
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
                await self.update_campaigns()
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –≤ –∫–∞–º–ø–∞–Ω–∏—è—Ö
                await self.discover_discussion_groups()
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–∞–º –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                await self.join_discussion_groups()
                
                logger.info("Telegram Agent –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
                return True
            else:
                logger.error("Telegram –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ TELEGRAM_SESSION_STRING")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram Agent: {e}")
            self.is_connected = False
            self.is_authorized = False
            return False
    
    async def _setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID –≥—Ä—É–ø–ø –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        discussion_group_ids = []
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∏–∑ –∫–∞–º–ø–∞–Ω–∏–π
        for campaign in self.active_campaigns:
            if campaign.telegram_chats:
                for chat in campaign.telegram_chats:
                    # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ ID –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                    if isinstance(chat, str) and chat.isdigit():
                        discussion_group_ids.append(int(chat))
                    elif isinstance(chat, int):
                        discussion_group_ids.append(chat)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
        if 2532661483 not in discussion_group_ids:
            discussion_group_ids.append(2532661483)
        
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –≥—Ä—É–ø–ø –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_group_ids}")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –°–ü–ï–¶–ò–ê–õ–¨–ù–û –¥–ª—è –≥—Ä—É–ø–ø –æ–±—Å—É–∂–¥–µ–Ω–∏–π
        @self.client.on(events.NewMessage(chats=discussion_group_ids, incoming=True))
        async def handle_discussion_message(event):
            await self._handle_message(event)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π
        @self.client.on(events.MessageEdited(chats=discussion_group_ids, incoming=True))
        async def handle_discussion_edited(event):
            await self._handle_message(event)
        
        # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–∫ fallback (–Ω–æ —Å –º–µ–Ω—å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)
        @self.client.on(events.NewMessage(incoming=True))
        async def handle_general_message(event):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –ª–∏ —ç—Ç–æ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
            chat = await event.get_chat()
            chat_id = getattr(chat, 'id', None)
            if chat_id not in discussion_group_ids:
                await self._handle_message(event)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π debug –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –í–°–ï–• —Å–æ–±—ã—Ç–∏–π
        @self.client.on(events.Raw)
        async def handle_raw_event(event):
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ —Å–æ–±—ã—Ç–∏—è
            event_type = type(event).__name__
            if event_type not in ['UpdateUserStatus', 'UpdateReadHistoryInbox', 'UpdateReadHistoryOutbox']:
                logger.debug(f"Raw event: {event_type}")
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è {len(discussion_group_ids)} –≥—Ä—É–ø–ø –æ–±—Å—É–∂–¥–µ–Ω–∏–π + –æ–±—â–∏–π fallback)")
    
    async def _handle_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            message = event.message
            chat = await event.get_chat()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
            is_comment = hasattr(message, 'reply_to_msg_id') and message.reply_to_msg_id is not None
            
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ç–µ–∫—Å—Ç='{message.text[:50] if message.text else 'None'}...', " +
                        f"—á–∞—Ç={getattr(chat, 'title', getattr(chat, 'username', 'Unknown'))}, " +
                        f"–æ—Ç={message.sender_id}, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π={is_comment}")
            
            if is_comment:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—é ID: {message.reply_to_msg_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            relevant_campaigns = []
            for campaign in self.active_campaigns:
                if self._is_message_relevant(message, chat, campaign, is_comment):
                    relevant_campaigns.append(campaign)
                    logger.debug(f"–ö–∞–º–ø–∞–Ω–∏—è {campaign.name} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è")
            
            if not relevant_campaigns:
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
            for campaign in relevant_campaigns:
                await self._process_message_for_campaign(message, chat, campaign, is_comment, event)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def _is_message_relevant(self, message: Message, chat, campaign: Campaign, is_comment: bool = False) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏"""
        try:
            # DEBUG: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ '{campaign.name}': " +
                        f"—á–∞—Ç_ID={getattr(chat, 'id', 'None')}, " +
                        f"username={getattr(chat, 'username', 'None')}, " +
                        f"–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π={is_comment}")
            
            # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞
            chat_matches = False
            
            # –ü–æ–ª—É—á–∞–µ–º target_chats
            target_chats = campaign.telegram_chats if isinstance(campaign.telegram_chats, list) else campaign.telegram_chats.split(',')
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ –∏ username
            if hasattr(chat, 'id') or (hasattr(chat, 'username') and chat.username):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID —á–∞—Ç–∞
                if hasattr(chat, 'id') and str(chat.id) in target_chats:
                    chat_matches = True
                    
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ username —á–∞—Ç–∞ (—Å @ –∏ –±–µ–∑ @)
                if hasattr(chat, 'username') and chat.username:
                    username_variants = [chat.username.lower(), f"@{chat.username.lower()}"]
                    for target in target_chats:
                        if target.lower() in username_variants:
                            chat_matches = True
                            break
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø –æ–±—Å—É–∂–¥–µ–Ω–∏–π
            if not chat_matches and hasattr(chat, 'id'):
                chat_id = getattr(chat, 'id', None)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —á–∞—Ç –≥—Ä—É–ø–ø–æ–π –æ–±—Å—É–∂–¥–µ–Ω–∏–π –æ–¥–Ω–æ–≥–æ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
                for target_chat in target_chats:
                    if target_chat.startswith('@'):
                        discussion_group_id = self.channel_discussion_groups.get(target_chat)
                        if discussion_group_id and chat_id == discussion_group_id:
                            chat_matches = True
                            break
            
            # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —Å—Ä–∞–∑—É –æ—Ç–∫–ª–æ–Ω—è–µ–º
            if not chat_matches:
                print(f"         ‚ùå –ß–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            if campaign.keywords and message.text:
                # campaign.keywords —É–∂–µ —Å–ø–∏—Å–æ–∫ (JSON), –Ω–µ —Å—Ç—Ä–æ–∫–∞
                if isinstance(campaign.keywords, list):
                    keywords = [kw.strip().lower() for kw in campaign.keywords]
                else:
                    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (—Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–ø—è—Ç—ã–º–∏)
                    keywords = [kw.strip().lower() for kw in campaign.keywords.split(',')]
                    
                message_text = message.text.lower()
                print(f"            üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (lower): '{message_text}'")
                print(f"            üîë Keywords –¥–ª—è –ø–æ–∏—Å–∫–∞: {keywords}")
                
                for keyword in keywords:
                    if keyword in message_text:
                        print(f"         ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{keyword}' –≤ '{message_text}'")
                        return True
                    else:
                        logger.debug(f"         –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"         ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É keywords: keywords={bool(campaign.keywords)}, message.text={bool(message.text)}")
            
            print(f"         ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ '{campaign.name}'")
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    async def _process_message_for_campaign(self, message: Message, chat, campaign: Campaign, is_comment: bool = False, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context = {
                'message': message.text or '',
                'message_obj': message,  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                'chat_name': getattr(chat, 'title', getattr(chat, 'username', 'Unknown')),
                'chat_id': getattr(chat, 'id', 'Unknown'),
                'sender_id': message.sender_id,
                'date': message.date,
                'campaign': campaign.name,
                'is_comment': is_comment,
                'reply_to_msg_id': getattr(message, 'reply_to_msg_id', None) if is_comment else None
            }
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ AI
            response = await self._generate_ai_response(context, campaign)
            
            if response:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π event –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                await self._send_response(message, response, campaign, is_comment, event)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            await self._log_activity(context, response, campaign)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ {campaign.name}: {e}")
    
    async def _generate_ai_response(self, context: Dict, campaign: Campaign) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ AI"""
        try:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
            prompt = f"""
            –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context['message']}
            –ß–∞—Ç: {context['chat_name']}
            –ö–∞–º–ø–∞–Ω–∏—è: {campaign.name}
            –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {campaign.system_instruction}
            
            –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∫–∞–º–ø–∞–Ω–∏–∏.
            """
            
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ AI –∫–ª–∏–µ–Ω—Ç–∞
            if self.openai_client:
                response = await self.openai_client.generate_response(prompt)
                return response
            elif self.claude_client:
                response = await self.claude_client.generate_response(prompt)
                return response
            else:
                print("‚ö†Ô∏è AI –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–ª–ª–±—ç–∫ –æ—Ç–≤–µ—Ç—ã")
                # –§–æ–ª–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏
                if campaign.example_replies:
                    message_lower = context.get('message', '').lower()
                    
                    # –ü—Ä–æ—Å—Ç–æ–π –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi']):
                        return campaign.example_replies.get('greeting', '–ü—Ä–∏–≤–µ—Ç! üëã')
                    elif any(word in message_lower for word in ['—Å–ø–∞—Å–∏–±–æ', 'thanks', '–±–ª–∞–≥–æ–¥–∞—Ä—é']):
                        return campaign.example_replies.get('thanks', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä')
                    elif any(word in message_lower for word in ['–ø–æ–º–æ—â—å', 'help', '–≤–æ–ø—Ä–æ—Å', '–∑–∞–¥–∞—á–∞']):
                        return campaign.example_replies.get('help', '–ö–æ–Ω–µ—á–Ω–æ, –ø–æ–º–æ–≥—É! ü§î')
                    else:
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                        return "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–¥–µ—Å—å! ü§ñ"
                else:
                    return "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏–∂—É –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üëã"
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –æ—Ç–≤–µ—Ç–∞: {e}")
            return None
    
    async def _send_response(self, original_message: Message, response: str, campaign: Campaign, is_comment: bool = False, event=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
        try:
            if is_comment and event:
                # –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º event.respond() —Å comment_to (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
                await event.respond(response, comment_to=original_message.id)
            elif is_comment:
                # Fallback –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –µ—Å–ª–∏ –Ω–µ—Ç event
                print(f"üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ reply (fallback)")
                await original_message.reply(response)
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º reply
                await original_message.reply(response)
                print(f"‚úÖ –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏: {campaign.name}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ (is_comment={is_comment}): {e}")
            
            # Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                if is_comment:
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ - –æ–±—ã—á–Ω—ã–π reply
                    print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ reply")
                    await original_message.reply(response)
                    print(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–∞")
                else:
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ send_message")
                    await self.client.send_message(
                        entity=original_message.chat_id,
                        message=response
                    )
                    print(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —É—Å–ø–µ—à–Ω–∞")
            except Exception as fallback_error:
                print(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å: {fallback_error}")
    
    async def _log_activity(self, context: Dict, response: Optional[str], campaign: Campaign):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            db = SessionLocal()
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–∞–∫–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
            trigger_keyword = "unknown"
            if campaign.keywords and context.get('message'):
                message_lower = context['message'].lower()
                keywords = campaign.keywords if isinstance(campaign.keywords, list) else campaign.keywords.split(',')
                for keyword in keywords:
                    if keyword.strip().lower() in message_lower:
                        trigger_keyword = keyword.strip()
                        break
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            message_type = "comment" if context.get('is_comment') else "message"
            chat_title = context.get('chat_name', 'Unknown')
            if context.get('is_comment'):
                chat_title += " (Discussion Group)"
            
            log_entry = ActivityLog(
                campaign_id=campaign.id,
                chat_id=str(context['chat_id']),
                chat_title=chat_title,
                message_id=getattr(context.get('message_obj'), 'id', 0),
                trigger_keyword=f"{trigger_keyword} ({message_type})",
                original_message=context['message'][:1000] if context.get('message') else '',
                agent_response=response[:1000] if response else 'No response',
                status='sent' if response else 'failed'
            )
            
            db.add(log_entry)
            db.commit()
            db.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    async def update_campaigns(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π"""
        try:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫—ç—à
            if current_time - self.last_campaign_update < self.campaign_cache_ttl:
                return
            
            db = SessionLocal()
            campaigns = db.query(Campaign).filter(Campaign.active == True).all()
            
            self.active_campaigns = campaigns
            self.last_campaign_update = current_time
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: {len(campaigns)}")
            
            db.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π: {e}")
    
    async def discover_discussion_groups(self):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –∫–∞–º–ø–∞–Ω–∏—è—Ö"""
        try:
            print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤...")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –∫–∞–º–ø–∞–Ω–∏–π
            all_channels = set()
            for campaign in self.active_campaigns:
                if campaign.telegram_chats:
                    for chat in campaign.telegram_chats:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª–æ–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)
                        if isinstance(chat, str) and chat.startswith('@'):
                            all_channels.add(chat)
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {list(all_channels)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            for channel in all_channels:
                discussion_group_id = await self.get_channel_discussion_group(channel)
                if discussion_group_id:
                    print(f"‚úÖ –ö–∞–Ω–∞–ª {channel} ‚Üí –ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_group_id}")
                else:
                    print(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel} –Ω–µ –∏–º–µ–µ—Ç –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π")
            
            print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {len(self.channel_discussion_groups)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {e}")
    
    async def join_discussion_groups(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–∞–º –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            print("üîó –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–∞–º –æ–±—Å—É–∂–¥–µ–Ω–∏–π...")
            
            joined_count = 0
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫–æ –≤—Å–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º –æ–±—Å—É–∂–¥–µ–Ω–∏–π
            for channel_identifier, discussion_group_id in self.channel_discussion_groups.items():
                try:
                    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π {discussion_group_id} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_identifier}...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º entity –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                    discussion_entity = await self.client.get_entity(discussion_group_id)
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
                    try:
                        await self.client(JoinChannelRequest(discussion_entity))
                        print(f"   ‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π {discussion_group_id}")
                        joined_count += 1
                    except Exception as join_error:
                        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫), —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                        if "already" in str(join_error).lower() or "participant" in str(join_error).lower():
                            print(f"   ‚úÖ –£–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π {discussion_group_id}")
                            joined_count += 1
                        else:
                            print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ {discussion_group_id}: {join_error}")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º silent ping –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    try:
                        await self.client.send_message(
                            discussion_entity, 
                            "üîî –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
                            silent=True  # –ë–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        )
                        print(f"   üì° –ê–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {discussion_group_id}")
                    except Exception as ping_error:
                        print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {ping_error}")
                        
                except Exception as entity_error:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è entity –≥—Ä—É–ø–ø—ã {discussion_group_id}: {entity_error}")
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–∞–º –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {joined_count}/{len(self.channel_discussion_groups)}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
            main_discussion_id = 2532661483
            if main_discussion_id not in [group_id for group_id in self.channel_discussion_groups.values()]:
                try:
                    print(f"üîó –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π {main_discussion_id}...")
                    main_entity = await self.client.get_entity(main_discussion_id)
                    
                    try:
                        await self.client(JoinChannelRequest(main_entity))
                        print(f"   ‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π")
                    except Exception as main_join_error:
                        if "already" in str(main_join_error).lower():
                            print(f"   ‚úÖ –£–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π")
                        else:
                            print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–µ: {main_join_error}")
                            
                except Exception as main_error:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–µ: {main_error}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–∞–º –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {e}")
    
    async def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
        # Test OpenAI client if it exists
        openai_working = False
        if self.openai_client:
            try:
                # Simple test
                openai_working = self.openai_client.test_connection()
            except:
                openai_working = False
        
        return {
            "connected": self.is_connected,
            "authorized": self.is_authorized,
            "active_campaigns": len(self.active_campaigns),
            "session_type": "StringSession" if self.session_string else "FileSession",
            "ai_clients": {
                "openai": self.openai_client is not None,
                "openai_working": openai_working,
                "claude": self.claude_client is not None
            }
        }
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞"""
        try:
            if self.is_connected:
                await self.client.disconnect()
                self.is_connected = False
                self.is_authorized = False
                print("‚úÖ Telegram Agent –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≥–µ–Ω—Ç–∞: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–≥–µ–Ω—Ç–∞
telegram_agent_instance = None

async def get_telegram_agent():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–≥–µ–Ω—Ç–∞ (Singleton)"""
    global telegram_agent_instance
    
    if telegram_agent_instance is None:
        telegram_agent_instance = TelegramAgentAppPlatform()
        await telegram_agent_instance.start()
    
    return telegram_agent_instance

async def stop_telegram_agent():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞"""
    global telegram_agent_instance
    
    if telegram_agent_instance:
        await telegram_agent_instance.stop()
        telegram_agent_instance = None