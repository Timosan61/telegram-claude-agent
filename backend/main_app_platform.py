"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è DigitalOcean App Platform
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ StringSession
"""

from fastapi import FastAPI, Depends, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
import os
import asyncio
from dotenv import load_dotenv

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.models.base import get_db, create_tables
from backend.api.campaigns import router as campaigns_router
from backend.api.logs import router as logs_router
from backend.api.chats import router as chats_router, set_telegram_agent
from backend.api.company import router as company_router
from backend.core.telegram_agent_app_platform import get_telegram_agent, stop_telegram_agent

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title="Telegram Claude Agent API (App Platform)",
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò-–∞–≥–µ–Ω—Ç–æ–º –≤ Telegram —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π DigitalOcean App Platform",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ Streamlit
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
telegram_agent = None

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global telegram_agent
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î
    create_tables()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∞–≥–µ–Ω—Ç–∞
    try:
        telegram_agent = await get_telegram_agent()
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –≤ —Ä–æ—É—Ç–µ—Ä —á–∞—Ç–æ–≤
        if telegram_agent:
            set_telegram_agent(telegram_agent)
        
        if telegram_agent and telegram_agent.is_authorized:
            print("üöÄ Telegram Claude Agent –∑–∞–ø—É—â–µ–Ω –≤ App Platform —Ä–µ–∂–∏–º–µ!")
        else:
            print("‚ö†Ô∏è Telegram Agent –∑–∞–ø—É—â–µ–Ω, –Ω–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_SESSION_STRING")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Agent: {e}")
        telegram_agent = None

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global telegram_agent
    
    if telegram_agent:
        await stop_telegram_agent()
        print("‚úÖ Telegram Agent –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return {
        "message": "Telegram Claude Agent API",
        "version": "1.0.2",
        "platform": "DigitalOcean App Platform",
        "status": "running"
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global telegram_agent
    
    # –ë–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    health_status = {
        "status": "healthy",
        "database": "connected",
        "platform": "app_platform"
    }
    
    # –°—Ç–∞—Ç—É—Å Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if telegram_agent:
        agent_status = await telegram_agent.get_status()
        health_status.update({
            "telegram_connected": agent_status.get("authorized", False),
            "telegram_status": agent_status,
            "session_type": agent_status.get("session_type", "unknown")
        })
    else:
        health_status.update({
            "telegram_connected": False,
            "telegram_status": "not_initialized",
            "session_type": "none"
        })
    
    # –°—Ç–∞—Ç—É—Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    ai_providers = {}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI
    openai_key = os.getenv("OPENAI_API_KEY")
    ai_providers["openai"] = bool(openai_key and len(openai_key) > 20)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Claude (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    claude_key = os.getenv("ANTHROPIC_API_KEY")
    ai_providers["claude"] = bool(claude_key and len(claude_key) > 20)
    
    health_status["ai_providers"] = ai_providers
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_status = {}
    required_vars = [
        "TELEGRAM_API_ID",
        "TELEGRAM_API_HASH", 
        "TELEGRAM_PHONE"
    ]
    
    for var in required_vars:
        env_status[var] = bool(os.getenv(var))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏
    session_vars = [
        "TELEGRAM_SESSION_STRING",
        "TELEGRAM_SESSION_B64",
        "TELEGRAM_SESSION"
    ]
    
    env_status["session_available"] = any(os.getenv(var) for var in session_vars)
    health_status["environment"] = env_status
    
    return health_status

@app.get("/telegram/status")
async def telegram_status():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å Telegram –∞–≥–µ–Ω—Ç–∞"""
    global telegram_agent
    
    if not telegram_agent:
        return {
            "status": "not_initialized",
            "message": "Telegram Agent –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        }
    
    status = await telegram_agent.get_status()
    
    return {
        "status": "initialized",
        "details": status,
        "message": "Telegram Agent —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω"
    }

@app.post("/telegram/restart")
async def restart_telegram_agent():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Telegram –∞–≥–µ–Ω—Ç–∞"""
    global telegram_agent
    
    try:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
        if telegram_agent:
            await stop_telegram_agent()
        
        # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        telegram_agent = await get_telegram_agent()
        
        if telegram_agent and telegram_agent.is_authorized:
            return {
                "status": "success",
                "message": "Telegram Agent –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            }
        else:
            return {
                "status": "warning",
                "message": "Telegram Agent –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, –Ω–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
            }
    
    except Exception as e:
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {str(e)}"
        }

@app.get("/environment/check")
async def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    env_info = {}
    
    # Telegram –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    telegram_vars = {
        "TELEGRAM_API_ID": os.getenv("TELEGRAM_API_ID"),
        "TELEGRAM_API_HASH": bool(os.getenv("TELEGRAM_API_HASH")),
        "TELEGRAM_PHONE": os.getenv("TELEGRAM_PHONE"),
    }
    
    # –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    session_vars = {
        "TELEGRAM_SESSION_STRING": bool(os.getenv("TELEGRAM_SESSION_STRING")),
        "TELEGRAM_SESSION_B64": bool(os.getenv("TELEGRAM_SESSION_B64")),
        "TELEGRAM_SESSION": bool(os.getenv("TELEGRAM_SESSION")),
    }
    
    # AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    ai_vars = {
        "OPENAI_API_KEY": bool(os.getenv("OPENAI_API_KEY")),
        "ANTHROPIC_API_KEY": bool(os.getenv("ANTHROPIC_API_KEY")),
    }
    
    env_info.update({
        "telegram": telegram_vars,
        "session": session_vars,
        "ai_providers": ai_vars,
        "platform": "DigitalOcean App Platform"
    })
    
    return env_info

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ API
app.include_router(campaigns_router, prefix="/campaigns", tags=["campaigns"])
app.include_router(logs_router, prefix="/logs", tags=["logs"])
app.include_router(chats_router, prefix="/chats", tags=["chats"])
app.include_router(company_router, prefix="/company", tags=["company"])

if __name__ == "__main__":
    import uvicorn
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", "8080"))
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Telegram Claude Agent –¥–ª—è App Platform –Ω–∞ {host}:{port}")
    
    uvicorn.run(
        "backend.main_app_platform:app",
        host=host,
        port=port,
        reload=False,  # –û—Ç–∫–ª—é—á–∞–µ–º reload –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        log_level="info"
    )