from fastapi import FastAPI, Depends, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
import os
from dotenv import load_dotenv

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.models.base import get_db, create_tables
from backend.api.campaigns import router as campaigns_router
from backend.api.logs import router as logs_router
from backend.api.chats import router as chats_router, set_telegram_agent
from backend.api.campaigns import set_telegram_agent as set_campaigns_agent
from backend.api.company import router as company_router
from backend.core.telegram_agent import TelegramAgent

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title="Telegram Claude Agent API",
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò-–∞–≥–µ–Ω—Ç–æ–º –≤ Telegram —Å Claude Code SDK",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ Streamlit
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –∞–≥–µ–Ω—Ç–∞
telegram_agent = None


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î
    create_tables()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∞–≥–µ–Ω—Ç–∞
    global telegram_agent
    telegram_agent = TelegramAgent()
    await telegram_agent.initialize()
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –≤ —Ä–æ—É—Ç–µ—Ä—ã
    set_telegram_agent(telegram_agent)
    set_campaigns_agent(telegram_agent)
    
    print("üöÄ Telegram Claude Agent –∑–∞–ø—É—â–µ–Ω!")


@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    global telegram_agent
    if telegram_agent:
        await telegram_agent.disconnect()
    print("üëã Telegram Claude Agent –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "Telegram Claude Agent API",
        "version": "1.0.0",
        "status": "active"
    }


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    global telegram_agent
    
    return {
        "status": "healthy",
        "telegram_connected": (telegram_agent.is_connected() if hasattr(telegram_agent, 'is_connected') and callable(telegram_agent.is_connected) else telegram_agent.is_connected) if telegram_agent else False,
        "database": "connected"
    }


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(campaigns_router, prefix="/campaigns", tags=["campaigns"])
app.include_router(logs_router, prefix="/logs", tags=["logs"])
app.include_router(chats_router, prefix="/chats", tags=["chats"])
app.include_router(company_router, prefix="/company", tags=["company"])


if __name__ == "__main__":
    import uvicorn
    
    host = os.getenv("API_HOST", "127.0.0.1")
    port = int(os.getenv("API_PORT", 8000))
    debug = os.getenv("DEBUG", "True").lower() == "true"
    
    uvicorn.run(
        "main:app",
        host=host,
        port=port,
        reload=debug,
        log_level="info"
    )