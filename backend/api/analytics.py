from fastapi import APIRouter, HTTPException, BackgroundTasks
from fastapi.responses import StreamingResponse
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
from datetime import datetime
import uuid
import io

from backend.services.analytics_service import analytics_service, AnalyticsConfig, ChatAnalytics

router = APIRouter()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –ë–î)
analysis_results: Dict[str, ChatAnalytics] = {}


class AnalysisRequest(BaseModel):
    chat_id: str
    chat_username: Optional[str] = None
    start_date: Optional[datetime] = None
    end_date: Optional[datetime] = None
    limit_messages: int = 1000
    include_media: bool = False
    include_replies: bool = True
    analyze_participants: bool = True
    keywords_filter: Optional[List[str]] = None


class ExportRequest(BaseModel):
    analysis_id: str
    format: str = "csv"  # csv, json


class DirectChannelAnalysisRequest(BaseModel):
    channel_name: str  # @channel –∏–ª–∏ ID –∏–ª–∏ username
    limit_messages: int = 1000
    start_date: Optional[datetime] = None
    end_date: Optional[datetime] = None
    include_media: bool = False
    include_replies: bool = True
    keywords_filter: Optional[List[str]] = None


@router.get("/health")
async def analytics_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Analytics Service —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
    service_status = {
        "service": "Analytics Service",
        "timestamp": datetime.now().isoformat(),
        "client_initialized": analytics_service.client is not None,
        "is_connected": analytics_service.is_connected,
        "credentials_check": {
            "api_id": analytics_service.api_id is not None,
            "api_hash": analytics_service.api_hash is not None,
            "phone": analytics_service.phone is not None
        }
    }
    
    # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if not analytics_service.client:
        service_status["status"] = "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
        service_status["message"] = "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Telegram API credentials"
        return service_status
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try:
        if not analytics_service.is_connected:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            connection_result = await analytics_service.initialize()
            service_status["connection_attempt"] = connection_result
        
        if analytics_service.is_connected:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            try:
                if analytics_service.client.is_user_authorized():
                    me = await analytics_service.client.get_me()
                    service_status["user_info"] = {
                        "first_name": me.first_name,
                        "last_name": me.last_name,
                        "phone": me.phone,
                        "username": getattr(me, 'username', None),
                        "user_id": me.id
                    }
                    service_status["status"] = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
                    service_status["message"] = f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ {me.first_name} {me.last_name or ''}"
                else:
                    service_status["status"] = "‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
                    service_status["message"] = "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
            except Exception as info_error:
                service_status["status"] = "‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"
                service_status["message"] = f"–ü–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è info: {info_error}"
        else:
            service_status["status"] = "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
            service_status["message"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API"
            
    except Exception as e:
        service_status["status"] = "‚ùå –û—à–∏–±–∫–∞"
        service_status["message"] = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"
        service_status["error_details"] = str(e)
    
    return service_status


@router.get("/chats/available")
async def get_available_chats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        chats = await analytics_service.get_available_chats()
        return {
            "chats": chats,
            "total": len(chats)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {str(e)}")


async def run_analysis_task(config: AnalyticsConfig, analysis_id: str):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —á–∞—Ç–∞ {config.chat_id} (ID: {analysis_id})")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        result = await analytics_service.analyze_chat(config)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        analysis_results[analysis_id] = result
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω (ID: {analysis_id})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ (ID: {analysis_id}): {e}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
        error_result = ChatAnalytics(
            chat_info={"error": str(e)},
            message_stats={},
            participant_stats={},
            time_analysis={},
            keyword_analysis={},
            media_analysis={},
            export_data=[]
        )
        analysis_results[analysis_id] = error_result


@router.post("/analyze")
async def start_analysis(request: AnalysisRequest, background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —á–∞—Ç–∞"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_id = str(uuid.uuid4())
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = AnalyticsConfig(
            chat_id=request.chat_id,
            chat_username=request.chat_username,
            start_date=request.start_date,
            end_date=request.end_date,
            limit_messages=request.limit_messages,
            include_media=request.include_media,
            include_replies=request.include_replies,
            analyze_participants=request.analyze_participants,
            keywords_filter=request.keywords_filter
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(run_analysis_task, config, analysis_id)
        
        return {
            "analysis_id": analysis_id,
            "status": "started",
            "message": "–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ analysis_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")


@router.get("/analyze/{analysis_id}/status")
async def get_analysis_status(analysis_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞"""
    if analysis_id in analysis_results:
        result = analysis_results[analysis_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É
        if "error" in result.chat_info:
            return {
                "analysis_id": analysis_id,
                "status": "error",
                "error": result.chat_info["error"]
            }
        else:
            return {
                "analysis_id": analysis_id,
                "status": "completed",
                "chat_title": result.chat_info.get("title", "Unknown"),
                "total_messages": result.message_stats.get("total", 0)
            }
    else:
        return {
            "analysis_id": analysis_id,
            "status": "in_progress"
        }


@router.get("/analyze/{analysis_id}/results")
async def get_analysis_results(analysis_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
    if analysis_id not in analysis_results:
        raise HTTPException(status_code=404, detail="–ê–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
    
    result = analysis_results[analysis_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É
    if "error" in result.chat_info:
        raise HTTPException(status_code=500, detail=result.chat_info["error"])
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª—å—à–∏–º–∏)
    return {
        "analysis_id": analysis_id,
        "chat_info": result.chat_info,
        "message_stats": result.message_stats,
        "participant_stats": result.participant_stats,
        "time_analysis": result.time_analysis,
        "keyword_analysis": result.keyword_analysis,
        "media_analysis": result.media_analysis,
        "export_available": len(result.export_data) > 0
    }


@router.post("/export")
async def export_analysis(request: ExportRequest):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    if request.analysis_id not in analysis_results:
        raise HTTPException(status_code=404, detail="–ê–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    result = analysis_results[request.analysis_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É
    if "error" in result.chat_info:
        raise HTTPException(status_code=500, detail=result.chat_info["error"])
    
    try:
        if request.format.lower() == "csv":
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            csv_data = analytics_service.export_to_csv(result)
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            chat_title = result.chat_info.get("title", "chat").replace(" ", "_")
            filename = f"analytics_{chat_title}_{datetime.now().strftime('%Y%m%d_%H%M')}.csv"
            
            return StreamingResponse(
                io.StringIO(csv_data),
                media_type="text/csv",
                headers={"Content-Disposition": f"attachment; filename={filename}"}
            )
            
        elif request.format.lower() == "json":
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
            json_data = analytics_service.export_to_json(result)
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            chat_title = result.chat_info.get("title", "chat").replace(" ", "_")
            filename = f"analytics_{chat_title}_{datetime.now().strftime('%Y%m%d_%H%M')}.json"
            
            return StreamingResponse(
                io.StringIO(json_data),
                media_type="application/json",
                headers={"Content-Disposition": f"attachment; filename={filename}"}
            )
            
        else:
            raise HTTPException(status_code=400, detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")


@router.delete("/analyze/{analysis_id}")
async def delete_analysis(analysis_id: str):
    """–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
    if analysis_id in analysis_results:
        del analysis_results[analysis_id]
        return {"message": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —É–¥–∞–ª–µ–Ω—ã"}
    else:
        raise HTTPException(status_code=404, detail="–ê–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")


@router.get("/analyze")
async def list_analyses():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤"""
    analyses = []
    
    for analysis_id, result in analysis_results.items():
        status = "error" if "error" in result.chat_info else "completed"
        
        analyses.append({
            "analysis_id": analysis_id,
            "status": status,
            "chat_title": result.chat_info.get("title", "Unknown"),
            "total_messages": result.message_stats.get("total", 0),
            "analyzed_participants": result.participant_stats.get("total_participants", 0)
        })
    
    return {
        "analyses": analyses,
        "total": len(analyses)
    }


@router.post("/initialize")
async def initialize_analytics_service():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        success = await analytics_service.initialize()
        if success:
            return {"message": "–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "status": "connected"}
        else:
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")


@router.post("/analyze-channel", response_model=dict)
async def analyze_channel_direct(request: DirectChannelAnalysisRequest, background_tasks: BackgroundTasks):
    """
    –ü—Ä—è–º–æ–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–∞–º–ø–∞–Ω–∏—è–º
    
    –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞:
    1. –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (@channel, username, –∏–ª–∏ ID)
    2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–∞–Ω–∞–ª—É –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Telethon
    3. –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_id = str(uuid.uuid4())
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        config = AnalyticsConfig(
            chat_id=request.channel_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º channel_name –∫–∞–∫ chat_id
            chat_username=request.channel_name if request.channel_name.startswith('@') else None,
            start_date=request.start_date,
            end_date=request.end_date,
            limit_messages=request.limit_messages,
            include_media=request.include_media,
            include_replies=request.include_replies,
            analyze_participants=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
            keywords_filter=request.keywords_filter
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(run_analysis_task, config, analysis_id)
        
        return {
            "analysis_id": analysis_id,
            "status": "started",
            "channel": request.channel_name,
            "limit_messages": request.limit_messages,
            "message": "–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ analysis_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
            "endpoints": {
                "status": f"/analytics/analyze/{analysis_id}/status",
                "results": f"/analytics/analyze/{analysis_id}/results"
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞: {str(e)}")


@router.get("/channel-info/{channel_name}")
async def get_channel_info(channel_name: str):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ/—á–∞—Ç–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel_info = await analytics_service.get_channel_info(channel_name)
        
        if not channel_info:
            raise HTTPException(status_code=404, detail="–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        return {
            "channel_name": channel_name,
            "info": channel_info,
            "accessible": True
        }
        
    except Exception as e:
        return {
            "channel_name": channel_name,
            "error": str(e),
            "accessible": False
        }