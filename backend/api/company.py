from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import Optional
from pydantic import BaseModel
import logging
from datetime import datetime

from database.models.base import get_db
from database.models.company import CompanySettings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ–º–ø–∞–Ω–∏–µ–π
logger = logging.getLogger("company_operations")
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger.addHandler(handler)
logger.setLevel(logging.INFO)

router = APIRouter()


# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class CompanySettingsCreate(BaseModel):
    name: str
    description: Optional[str] = None
    website: Optional[str] = None
    email: Optional[str] = None
    timezone: str = "UTC"
    telegram_accounts: Optional[list] = []
    ai_providers: Optional[dict] = {}
    default_settings: Optional[dict] = {}


class CompanySettingsUpdate(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    website: Optional[str] = None
    email: Optional[str] = None
    timezone: Optional[str] = None
    telegram_accounts: Optional[list] = None
    ai_providers: Optional[dict] = None
    default_settings: Optional[dict] = None


class TelegramAccountCreate(BaseModel):
    name: str
    phone: str
    api_id: str
    api_hash: str


class AIProviderUpdate(BaseModel):
    enabled: bool
    api_key: Optional[str] = None
    default_model: Optional[str] = None
    default_agent: Optional[str] = None
    max_tokens: Optional[int] = None
    temperature: Optional[float] = None


@router.get("/settings", response_model=dict)
async def get_company_settings(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –æ–¥–Ω—É –∫–æ–º–ø–∞–Ω–∏—é)
        settings = db.query(CompanySettings).first()
        
        if not settings:
            logger.info("üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            return {
                "name": "",
                "description": "",
                "website": "",
                "email": "",
                "timezone": "UTC",
                "telegram_accounts": [],
                "ai_providers": {
                    "openai": {"enabled": False, "default_model": "gpt-4"},
                    "claude": {"enabled": False, "default_agent": ""}
                },
                "default_settings": {
                    "context_messages_count": 3,
                    "response_delay": 1.0,
                    "auto_reply": True,
                    "work_hours_enabled": False,
                    "work_start": "09:00",
                    "work_end": "18:00"
                }
            }
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ ID={settings.id}, name='{settings.name}'")
        return settings.to_dict()
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–º–ø–∞–Ω–∏–∏: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")


@router.put("/settings", response_model=dict)
async def update_company_settings(
    settings_data: CompanySettingsUpdate,
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
        settings = db.query(CompanySettings).first()
        
        update_data = settings_data.dict(exclude_unset=True)
        logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–º–ø–∞–Ω–∏–∏: {update_data}")
        
        if not settings:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–º–ø–∞–Ω–∏–∏")
            settings = CompanySettings()
            db.add(settings)
        else:
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–º–ø–∞–Ω–∏–∏ ID={settings.id}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
        for field, value in update_data.items():
            old_value = getattr(settings, field, None)
            setattr(settings, field, value)
            logger.info(f"  ‚Ä¢ {field}: '{old_value}' ‚Üí '{value}'")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        db.commit()
        db.refresh(settings)
        
        result = settings.to_dict()
        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ID={settings.id}, name='{settings.name}'")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        return result
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–º–ø–∞–Ω–∏–∏: {str(e)}")
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")


@router.post("/telegram-accounts", response_model=dict)
async def add_telegram_account(
    account_data: TelegramAccountCreate,
    db: Session = Depends(get_db)
):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π Telegram –∞–∫–∫–∞—É–Ω—Ç"""
    settings = db.query(CompanySettings).first()
    
    if not settings:
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        settings = CompanySettings(
            name="Default Company",
            telegram_accounts=[]
        )
        db.add(settings)
        db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –±–µ–∑ –∫–æ–º–º–∏—Ç–∞
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
    new_account = {
        "id": len(settings.telegram_accounts or []) + 1,
        "name": account_data.name,
        "phone": account_data.phone,
        "api_id": account_data.api_id,
        "api_hash": account_data.api_hash,  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —à–∏—Ñ—Ä–æ–≤–∞—Ç—å
        "is_active": False,
        "campaigns_count": 0,
        "last_used": None
    }
    
    if not settings.telegram_accounts:
        settings.telegram_accounts = []
    
    settings.telegram_accounts.append(new_account)
    
    db.commit()
    db.refresh(settings)
    
    return {"message": "Telegram –∞–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω", "account": new_account}


@router.delete("/telegram-accounts/{account_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_telegram_account(account_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç"""
    settings = db.query(CompanySettings).first()
    
    if not settings or not settings.telegram_accounts:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
    updated_accounts = [
        acc for acc in settings.telegram_accounts 
        if acc.get("id") != account_id
    ]
    
    if len(updated_accounts) == len(settings.telegram_accounts):
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    settings.telegram_accounts = updated_accounts
    db.commit()


@router.put("/ai-providers/{provider}", response_model=dict)
async def update_ai_provider(
    provider: str,
    provider_data: AIProviderUpdate,
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    if provider not in ["openai", "claude"]:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"
        )
    
    settings = db.query(CompanySettings).first()
    
    if not settings:
        settings = CompanySettings(
            name="Default Company",
            ai_providers={}
        )
        db.add(settings)
        db.flush()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    if not settings.ai_providers:
        settings.ai_providers = {}
    
    if provider not in settings.ai_providers:
        settings.ai_providers[provider] = {}
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    provider_update = provider_data.dict(exclude_unset=True)
    settings.ai_providers[provider].update(provider_update)
    
    db.commit()
    db.refresh(settings)
    
    return {
        "message": f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ {provider} –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
        "provider": provider,
        "settings": settings.ai_providers[provider]
    }


@router.put("/default-settings", response_model=dict)
async def update_default_settings(
    default_data: dict,
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    settings = db.query(CompanySettings).first()
    
    if not settings:
        settings = CompanySettings(
            name="Default Company",
            default_settings=default_data
        )
        db.add(settings)
    else:
        settings.default_settings = default_data
    
    db.commit()
    db.refresh(settings)
    
    return {"message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω—ã", "settings": settings.default_settings}