"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ Telegram
"""

from fastapi import FastAPI, Depends
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
import os
from dotenv import load_dotenv

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.models.base import get_db, create_tables
from backend.api.campaigns import router as campaigns_router
from backend.api.logs import router as logs_router

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title="Telegram Claude Agent API (Minimal)",
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò-–∞–≥–µ–Ω—Ç–æ–º –≤ Telegram —Å Claude Code SDK (–±–µ–∑ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ Streamlit
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î
    create_tables()
    print("üöÄ Minimal Telegram Claude Agent API –∑–∞–ø—É—â–µ–Ω!")


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "Telegram Claude Agent API (Minimal Mode)",
        "version": "1.0.0-minimal",
        "status": "active",
        "note": "–ó–∞–ø—É—â–µ–Ω –±–µ–∑ Telegram —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"
    }


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "status": "healthy",
        "telegram_connected": False,  # –í –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ False
        "database": "connected",
        "mode": "minimal"
    }


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(campaigns_router, prefix="/api/campaigns", tags=["campaigns"])
app.include_router(logs_router, prefix="/api/logs", tags=["logs"])


if __name__ == "__main__":
    import uvicorn
    
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–∞–∫ –∏ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", "8000"))
    debug = os.getenv("DEBUG", "False").lower() == "true"
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {host}:{port}")
    print(f"üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {debug}")
    print(f"üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    uvicorn.run(
        "backend.main_minimal:app",
        host=host, 
        port=port,
        reload=debug,
        log_level="info"
    )